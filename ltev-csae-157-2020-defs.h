/*************************************************************/
/* Copyright (C) 2024 OSS Nokalva, Inc.  All rights reserved.*/
/*************************************************************/

/* THIS FILE IS PROPRIETARY MATERIAL OF OSS NOKALVA, INC.
 * AND MAY BE USED ONLY BY DIRECT LICENSEES OF OSS NOKALVA, INC.
 * THIS FILE MAY NOT BE DISTRIBUTED.
 * THIS COPYRIGHT STATEMENT MAY NOT BE REMOVED. */

/* This file was generated by a TRIAL version of the OSS ASN.1 Tools.
 * Applications built using this file can be executed only on the machine
 * on which you run the OSS ASN.1 compiler. */

/* Generated for: lzp (Trial), License 88175Z 88175Z. */
/* Abstract syntax: ltev_csae_157_2020_defs */
/* Created: Mon Aug 19 15:16:04 2024 */
/* ASN.1 compiler version: 11.3.1 */
/* Code generated for runtime version 11.3.1 or later */
/* Compiler operating system: Linux with 64-bit support */
/* Compiler machine type: x86-64 */
/* Target operating system: Linux with 64-bit support */
/* Target machine type: x86-64 */
/* C compiler options required: -m64 */
/* ASN.1 compiler options and file names specified:
 * -controlfile ltev-csae-157-2020-defs.c -prefix asn -uper -ber -json
 * -allow universaltags ../../asn1dflt.linux-amd64
 * ltev-csae-157-2020-defs.asn
 */

#ifndef OSS_ltev_csae_157_2020_defs
#define OSS_ltev_csae_157_2020_defs

#include "ossasn1.h"

#define          asnMessageFrame_PDU 1
#define          asnPAMData_PDU 2
#define          asnCLPMM_PDU 3
#define          asnPersonalSafetyMessage_PDU 4
#define          asnRoadsideCoordination_PDU 5
#define          asnRTCMcorrections_PDU 6
#define          asnSensorSharingMsg_PDU 7
#define          asnTestMsg_PDU 8
#define          asnVehIntentionAndRequest_PDU 9
#define          asnVehiclePaymentMessage_PDU 10
#define          asnMessageTypes_OSET 1      /* Class is MESSAGE-ID-AND-TYPE */

typedef unsigned short  asnMsgCount;

	/* Units of of 10 cm */
	/* with a range of +- 204.7 meters vertical */
	/* value 2047 to be used for 2047 or greater */
	/* value -2047 to be used for -2047 or greater */
	/* value -2048 to be unavailable */
typedef unsigned short  asnDSecond;

	/* Units of of 10 mSec, */
	/* with a range of 0.01 seconds to 10 minutes and 55.34 seconds */
	/* a value of 65534 to be used for 655.34 seconds or greater */
	/* a value of 65535 to be unavailable */
typedef enum asnTimeConfidence {
    asnTimeConfidence_unavailable = 0, /* Not Equipped or unavailable */
    asntime_100_000 = 1, /* Better than 100 Seconds */
    asntime_050_000 = 2, /* Better than 50 Seconds */
    asntime_020_000 = 3, /* Better than 20 Seconds */
    asntime_010_000 = 4, /* Better than 10 Seconds */
    asntime_002_000 = 5, /* Better than 2 Seconds */
    asntime_001_000 = 6, /* Better than 1 Second */
    asntime_000_500 = 7, /* Better than 0.5 Seconds */
    asntime_000_200 = 8, /* Better than 0.2 Seconds */
    asntime_000_100 = 9, /* Better than 0.1 Seconds */
    asntime_000_050 = 10, /* Better than 0.05 Seconds */
    asntime_000_020 = 11, /* Better than 0.02 Seconds */
    asntime_000_010 = 12, /* Better than 0.01 Seconds */
    asntime_000_005 = 13, /* Better than 0.005 Seconds */
    asntime_000_002 = 14, /* Better than 0.002 Seconds */
    asntime_000_001 = 15, /* Better than 0.001 Seconds */
		/* Better than one millisecond */
    asntime_000_000_5 = 16, /* Better than 0.000,5 Seconds */
    asntime_000_000_2 = 17, /* Better than 0.000,2 Seconds */
    asntime_000_000_1 = 18, /* Better than 0.000,1 Seconds */
    asntime_000_000_05 = 19, /* Better than 0.000,05 Seconds */
    asntime_000_000_02 = 20, /* Better than 0.000,02 Seconds */
    asntime_000_000_01 = 21, /* Better than 0.000,01 Seconds */
    asntime_000_000_005 = 22, /* Better than 0.000,005 Seconds */
    asntime_000_000_002 = 23, /* Better than 0.000,002 Seconds */
    asntime_000_000_001 = 24, /* Better than 0.000,001 Seconds */
		/* Better than one micro second */
    asntime_000_000_000_5 = 25, /* Better than 0.000,000,5 Seconds */
    asntime_000_000_000_2 = 26, /* Better than 0.000,000,2 Seconds */
    asntime_000_000_000_1 = 27, /* Better than 0.000,000,1 Seconds */
    asntime_000_000_000_05 = 28, /* Better than 0.000,000,05 Seconds */
    asntime_000_000_000_02 = 29, /* Better than 0.000,000,02 Seconds */
    asntime_000_000_000_01 = 30, /* Better than 0.000,000,01 Seconds */
    asntime_000_000_000_005 = 31, /* Better than 0.000,000,005 Seconds */
    asntime_000_000_000_002 = 32, /* Better than 0.000,000,002 Seconds */
    asntime_000_000_000_001 = 33, /* Better than 0.000,000,001 Seconds */
		/* Better than one nano second */
    asntime_000_000_000_000_5 = 34, /* Better than 0.000,000,000,5 Seconds */
    asntime_000_000_000_000_2 = 35, /* Better than 0.000,000,000,2 Seconds */
    asntime_000_000_000_000_1 = 36, /* Better than 0.000,000,000,1 Seconds */
    asntime_000_000_000_000_05 = 37, /* Better than 0.000,000,000,05 Seconds */
    asntime_000_000_000_000_02 = 38, /* Better than 0.000,000,000,02 Seconds */
    asntime_000_000_000_000_01 = 39 /* Better than 0.000,000,000,01 Seconds */
} asnTimeConfidence;

typedef int             asnLatitude;

	/* Units of 1/10 micro degree */
	/* Providing a range of plus-minus 90 degrees */
typedef int             asnLongitude;

	/* Units of 1/10 micro degree */
	/* Providing a range of plus-minus 180 degrees */
typedef int             asnElevation;

typedef struct asnPosition3D {
    unsigned char   bit_mask;
#       define      asnPosition3D_elevation_present 0x80
    asnLatitude     lat;
		/* in 1/10th micro degrees */
    asnLongitude    Position3D_long;
		/* in 1/10th micro degrees */
    asnElevation    elevation;  /* optional; set in bit_mask
                                 * asnPosition3D_elevation_present if present */
		/* in 10 cm units */
} asnPosition3D;

typedef unsigned short  asnSemiMajorAxisAccuracy;

	/* semi-major axis accuracy at one standard dev */
	/* range 0-12.7 meter, LSB = .05m */
	/* 254 = any value equal or greater than 12.70 meter */
	/* 255 = unavailable semi-major axis value */
typedef unsigned short  asnSemiMinorAxisAccuracy;

	/* semi-minor axis accuracy at one standard dev */
	/* range 0-12.7 meter, LSB = .05m */
	/* 254 = any value equal or greater than 12.70 meter */
	/* 255 = unavailable semi-minor axis value */
typedef unsigned short  asnSemiMajorAxisOrientation;

	/* orientation of semi-major axis */
	/* relative to true north (0~359.9945078786 degrees) */
	/* Units of 360/65535 deg = 0.0054932479 */
	/* a value of 0 shall be 0 degrees */
	/* a value of 1 shall be 0.0054932479 degrees */
	/* a value of 65534 shall be 359.9945078786 deg */
	/* a value of 65535 shall be used for orientation unavailable */
typedef struct asnPositionalAccuracy {
		/* NMEA-183 values expressed in strict ASN form */
    asnSemiMajorAxisAccuracy semiMajor;
    asnSemiMinorAxisAccuracy semiMinor;
    asnSemiMajorAxisOrientation orientation;
} asnPositionalAccuracy;

typedef enum asnPositionConfidence {
    asnPositionConfidence_unavailable = 0, /* Not Equipped or unavailable */
    asna500m = 1, /* 500m or about 5 * 10 ^ -3 decimal degrees */
    asna200m = 2, /* 200m or about 2 * 10 ^ -3 decimal degrees */
    asna100m = 3, /* 100m or about 1 * 10 ^ -3 decimal degrees */
    asna50m = 4, /* 50m or about 5 * 10 ^ -4 decimal degrees */
    asna20m = 5, /* 20m or about 2 * 10 ^ -4 decimal degrees */
    asna10m = 6, /* 10m or about 1 * 10 ^ -4 decimal degrees */
    asna5m = 7, /* 5m or about 5 * 10 ^ -5 decimal degrees */
    asna2m = 8, /* 2m or about 2 * 10 ^ -5 decimal degrees */
    asna1m = 9, /* 1m or about 1 * 10 ^ -5 decimal degrees */
    asna50cm = 10, /* 0.50m or about 5 * 10 ^ -6 decimal degrees */
    asna20cm = 11, /* 0.20m or about 2 * 10 ^ -6 decimal degrees */
    asna10cm = 12, /* 0.10m or about 1 * 10 ^ -6 decimal degrees */
    asna5cm = 13, /* 0.05m or about 5 * 10 ^ -7 decimal degrees */
    asna2cm = 14, /* 0.02m or about 2 * 10 ^ -7 decimal degrees */
    asna1cm = 15 /* 0.01m or about 1 * 10 ^ -7 decimal degrees */
} asnPositionConfidence;

typedef enum asnElevationConfidence {
    asnElevationConfidence_unavailable = 0, /* Not Equipped or unavailable */
    asnelev_500_00 = 1, /* (500 m) */
    asnelev_200_00 = 2, /* (200 m) */
    asnelev_100_00 = 3, /* (100 m) */
    asnelev_050_00 = 4, /* (50 m) */
    asnelev_020_00 = 5, /* (20 m) */
    asnelev_010_00 = 6, /* (10 m) */
    asnelev_005_00 = 7, /* (5 m) */
    asnelev_002_00 = 8, /* B(2 m) */
    asnelev_001_00 = 9, /* (1 m) */
    asnelev_000_50 = 10, /* (50 cm) */
    asnelev_000_20 = 11, /* (20 cm) */
    asnelev_000_10 = 12, /* (10 cm) */
    asnelev_000_05 = 13, /* (5 cm) */
    asnelev_000_02 = 14, /* B(2 cm) */
    asnelev_000_01 = 15 /* (1 cm) */
} asnElevationConfidence;

	/* Units of 10 cm steps above or below the reference ellipsoid */
	/* Providing a range of -409.5 to + 6143.9 meters */
	/* The value -4096 shall be used when Unknown is to be sent */
typedef struct asnPositionConfidenceSet {
    unsigned char   bit_mask;
#       define      asnPositionConfidenceSet_elevation_present 0x80
    asnPositionConfidence pos; /* for both horizontal directions */
    asnElevationConfidence elevation;  /* optional; set in bit_mask
                                * asnPositionConfidenceSet_elevation_present if
                                * present */
} asnPositionConfidenceSet;

	/* Units of 5 cm, range to 6.35 meters */
typedef enum asnTransmissionState {
    asnneutral = 0, /* Neutral */
    asnTransmissionState_park = 1, /* Park */
    asnforwardGears = 2, /* Forward gears */
    asnreverseGears = 3, /* Reverse gears */
    asnTransmissionState_reserved1 = 4,
    asnreserved2 = 5,
    asnTransmissionState_reserved3 = 6,
    asnTransmissionState_unavailable = 7/* not-equipped or unavailable value, */
		/* Any related speed is relative to the vehicle reference frame used */
} asnTransmissionState;

	/* Units of 0.01 degrees per second (signed) */
typedef unsigned short  asnSpeed;

	/* Units of 0.02 m/s */
	/* The value 8191 indicates that */
	/* speed is unavailable */
typedef unsigned short  asnHeading;

	/* Units of 1.5 degrees */
	/* over a range of 0~358.5 degrees */
	/* the value 240 shall be used for unavailable */
typedef short           asnSteeringWheelAngle;

typedef enum asnSpeedConfidence {
    asnSpeedConfidence_unavailable = 0, /* Not Equipped or unavailable */
    asnprec100ms = 1, /* 100 meters / sec */
    asnprec10ms = 2, /* 10 meters / sec */
    asnprec5ms = 3, /* 5 meters / sec */
    asnprec1ms = 4, /* 1 meters / sec */
    asnprec0_1ms = 5, /* 0.1 meters / sec */
    asnprec0_05ms = 6, /* 0.05 meters / sec */
    asnprec0_01ms = 7 /* 0.01 meters / sec */
} asnSpeedConfidence;

typedef enum asnHeadingConfidence {
    asnHeadingConfidence_unavailable = 0, /* Not Equipped or unavailable */
    asnHeadingConfidence_prec10deg = 1, /* 10 degrees */
    asnprec05deg = 2, /* 5 degrees */
    asnprec01deg = 3, /* 1 degrees */
    asnHeadingConfidence_prec0_1deg = 4, /* 0.1 degrees */
    asnHeadingConfidence_prec0_05deg = 5, /* 0.05 degrees */
    asnHeadingConfidence_prec0_01deg = 6, /* 0.01 degrees */
    asnprec0_0125deg = 7 /* 0.0125 degrees, aligned with heading LSB */
} asnHeadingConfidence;

typedef enum asnSteeringWheelAngleConfidence {
    asnSteeringWheelAngleConfidence_unavailable = 0, /* Not Equipped with Wheel angle */
		/* or Wheel angle status is unavailable */
    asnprec2deg = 1, /* 2 degrees */
    asnSteeringWheelAngleConfidence_prec1deg = 2, /* 1 degree */
    asnprec0_02deg = 3 /* 0.02 degrees */
} asnSteeringWheelAngleConfidence;

	/* Units of 1.5 degrees, a range of -189 to +189 degrees */
	/* +001 = +1.5 deg */
	/* -126 = -189 deg and beyond */
	/* +126 = +189 deg and beyond */
	/* +127 to be used for unavailable */
typedef struct asnMotionConfidenceSet {
    unsigned char   bit_mask;
#       define      asnMotionConfidenceSet_speedCfd_present 0x80
#       define      asnMotionConfidenceSet_headingCfd_present 0x40
#       define      asnsteerCfd_present 0x20
    asnSpeedConfidence speedCfd;  /* optional; set in bit_mask
                                   * asnMotionConfidenceSet_speedCfd_present if
                                   * present */
    asnHeadingConfidence headingCfd;  /* optional; set in bit_mask
                                 * asnMotionConfidenceSet_headingCfd_present if
                                 * present */
    asnSteeringWheelAngleConfidence steerCfd;  /* optional; set in bit_mask
                                                * asnsteerCfd_present if
                                                * present */
} asnMotionConfidenceSet;

typedef short           asnAcceleration;

	/* Units are 0.01 m/s^2 */
	/* the value 2000 shall be used for values greater than 2000 */
	/* the value -2000 shall be used for values less than -2000 */
	/* a value of 2001 shall be used for Unavailable */
typedef short           asnVerticalAcceleration;

	/* Units of 0.02 G steps over -2.52 to +2.54 G */
	/* The value +127 shall be used for ranges >= 2.54 G */
	/* The value -126 shall be used for ranges <= 2.52 G */
	/* The value -127 shall be used for unavailable */
typedef short           asnYawRate;

typedef struct asnAccelerationSet4Way {
    asnAcceleration AccelerationSet4Way_long;
		/* Along the Vehicle Longitudinal axis */
    asnAcceleration lat;
		/* Along the Vehicle Lateral axis */
    asnVerticalAcceleration vert;
		/* Along the Vehicle Vertical axis */
    asnYawRate      yaw;
} asnAccelerationSet4Way;

typedef enum asnBrakePedalStatus {
    asnBrakePedalStatus_unavailable = 0, /* Vehicle brake pedal detector is unavailable */
    asnBrakePedalStatus_off = 1, /* Vehicle's brake pedal is not pressed */
    asnBrakePedalStatus_on = 2 /* Vehicle's brake pedal is pressed */
} asnBrakePedalStatus;

typedef struct asnBrakeAppliedStatus {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} asnBrakeAppliedStatus;
#define                     asnBrakeAppliedStatus_unavailable 0x80 /* When set, the brake applied status is unavailable */
#define                     asnBrakeAppliedStatus_unavailable_byte 0
#define                     asnleftFront 0x40 /* Left Front Active */
#define                     asnleftFront_byte 0
#define                     asnleftRear 0x20 /* Left Rear Active */
#define                     asnleftRear_byte 0
#define                     asnrightFront 0x10 /* Right Front Active */
#define                     asnrightFront_byte 0
#define                     asnrightRear 0x08 /* Right Rear Active */
#define                     asnrightRear_byte 0

typedef enum asnTractionControlStatus {
    asnTractionControlStatus_unavailable = 0, /* Not Equipped with traction control */
		/* or traction control status is unavailable */
    asnTractionControlStatus_off = 1, /* traction control is Off */
    asnTractionControlStatus_on = 2, /* traction control is On (but not Engaged) */
    asnTractionControlStatus_engaged = 3 /* traction control is Engaged */
} asnTractionControlStatus;

typedef enum asnAntiLockBrakeStatus {
    asnAntiLockBrakeStatus_unavailable = 0, /* Vehicle Not Equipped with ABS Brakes */
		/* or ABS Brakes status is unavailable */
    asnAntiLockBrakeStatus_off = 1, /* Vehicle's ABS are Off */
    asnAntiLockBrakeStatus_on = 2, /* Vehicle's ABS are On ( but not Engaged ) */
    asnAntiLockBrakeStatus_engaged = 3 /* Vehicle's ABS control is Engaged on any wheel */
} asnAntiLockBrakeStatus;

typedef enum asnStabilityControlStatus {
    asnStabilityControlStatus_unavailable = 0, /* Not Equipped with SC */
		/* or SC status is unavailable */
    asnStabilityControlStatus_off = 1, /* Off */
    asnStabilityControlStatus_on = 2, /* On or active (but not engaged) */
    asnStabilityControlStatus_engaged = 3 /* stability control is Engaged */
} asnStabilityControlStatus;

typedef enum asnBrakeBoostApplied {
    asnBrakeBoostApplied_unavailable = 0, /* Vehicle not equipped with brake boost */
		/* or brake boost data is unavailable */
    asnBrakeBoostApplied_off = 1, /* Vehicle's brake boost is off */
    asnBrakeBoostApplied_on = 2 /* Vehicle's brake boost is on (applied) */
} asnBrakeBoostApplied;

typedef enum asnAuxiliaryBrakeStatus {
    asnAuxiliaryBrakeStatus_unavailable = 0, /* Vehicle Not Equipped with Aux Brakes */
		/* or Aux Brakes status is unavailable */
    asnAuxiliaryBrakeStatus_off = 1, /* Vehicle's Aux Brakes are Off */
    asnAuxiliaryBrakeStatus_on = 2, /* Vehicle's Aux Brakes are On ( Engaged ) */
    asnAuxiliaryBrakeStatus_reserved = 3
} asnAuxiliaryBrakeStatus;

typedef struct asnBrakeSystemStatus {
    unsigned char   bit_mask;
#       define      asnbrakePadel_present 0x80
#       define      asnwheelBrakes_present 0x40
#       define      asntraction_present 0x20
#       define      asnabs_present 0x10
#       define      asnscs_present 0x08
#       define      asnbrakeBoost_present 0x04
#       define      asnauxBrakes_present 0x02
    asnBrakePedalStatus brakePadel;  /* optional; set in bit_mask
                                      * asnbrakePadel_present if present */
    asnBrakeAppliedStatus wheelBrakes;  /* optional; set in bit_mask
                                         * asnwheelBrakes_present if present */
    asnTractionControlStatus traction;  /* optional; set in bit_mask
                                         * asntraction_present if present */
    asnAntiLockBrakeStatus abs;  /* optional; set in bit_mask asnabs_present if
                                  * present */
    asnStabilityControlStatus scs;  /* optional; set in bit_mask asnscs_present
                                     * if present */
    asnBrakeBoostApplied brakeBoost;  /* optional; set in bit_mask
                                       * asnbrakeBoost_present if present */
    asnAuxiliaryBrakeStatus auxBrakes;  /* optional; set in bit_mask
                                         * asnauxBrakes_present if present */
} asnBrakeSystemStatus;

typedef unsigned short  asnVehicleWidth;

	/* Units are 1 cm with a range of >10 meters */
typedef unsigned short  asnVehicleLength;

	/* Units of 1 cm with a range of >40 meters */
typedef unsigned short  asnVehicleHeight;

	/* Units of 10cm */
	/* A straight path to use value of 32767 */
typedef struct asnVehicleSize {
    unsigned char   bit_mask;
#       define      asnVehicleSize_height_present 0x80
    asnVehicleWidth width;
    asnVehicleLength length;
    asnVehicleHeight height;  /* optional; set in bit_mask
                               * asnVehicleSize_height_present if present */
} asnVehicleSize;

	/*********************************Basic Vehicle Class************************** */
typedef unsigned short  asnBasicVehicleClass;

	/*********************************Vehicle Fuel Type************************** */
typedef unsigned short  asnFuelType;

typedef struct asnVehicleClassification {
    unsigned char   bit_mask;
#       define      asnfuelType_present 0x80
    asnBasicVehicleClass classification;
    asnFuelType     fuelType;  /* optional; set in bit_mask asnfuelType_present
                                * if present */
} asnVehicleClassification;

typedef struct asnVehicleEventFlags {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} asnVehicleEventFlags;
#define                     asneventHazardLights 0x80
#define                     asneventHazardLights_byte 0
#define                     asneventStopLineViolation 0x40 /* Intersection Violation */
#define                     asneventStopLineViolation_byte 0
#define                     asneventABSactivated 0x20
#define                     asneventABSactivated_byte 0
#define                     asneventTractionControlLoss 0x10
#define                     asneventTractionControlLoss_byte 0
#define                     asneventStabilityControlactivated 0x08
#define                     asneventStabilityControlactivated_byte 0
#define                     asneventHazardousMaterials 0x04
#define                     asneventHazardousMaterials_byte 0
#define                     asneventReserved1 0x02
#define                     asneventReserved1_byte 0
#define                     asneventHardBraking 0x01
#define                     asneventHardBraking_byte 0
#define                     asneventLightsChanged 0x80
#define                     asneventLightsChanged_byte 1
#define                     asneventWipersChanged 0x40
#define                     asneventWipersChanged_byte 1
#define                     asneventFlatTire 0x20
#define                     asneventFlatTire_byte 1
#define                     asneventDisabledVehicle 0x10 /* The DisabledVehicle DF may also be sent */
#define                     asneventDisabledVehicle_byte 1
#define                     asneventAirBagDeployment 0x08
#define                     asneventAirBagDeployment_byte 1

	/* units of milliseconds */
typedef unsigned short  asnDYear;

	/* units of years */
typedef unsigned short  asnDMonth;

	/* units of months */
typedef unsigned short  asnDDay;

	/* units of days */
typedef unsigned short  asnDHour;

	/* units of hours */
typedef unsigned short  asnDMinute;

	/* units of minutes */
typedef short           asnDTimeOffset;

	/* units of minutes from UTC time */
typedef struct asnDDateTime {
    unsigned char   bit_mask;
#       define      asnyear_present 0x80
#       define      asnmonth_present 0x40
#       define      asnday_present 0x20
#       define      asnhour_present 0x10
#       define      asnminute_present 0x08
#       define      asnsecond_present 0x04
#       define      asnoffset_present 0x02
    asnDYear        year;  /* optional; set in bit_mask asnyear_present if
                            * present */
    asnDMonth       month;  /* optional; set in bit_mask asnmonth_present if
                             * present */
    asnDDay         day;  /* optional; set in bit_mask asnday_present if
                           * present */
    asnDHour        hour;  /* optional; set in bit_mask asnhour_present if
                            * present */
    asnDMinute      minute;  /* optional; set in bit_mask asnminute_present if
                              * present */
    asnDSecond      second;  /* optional; set in bit_mask asnsecond_present if
                              * present */
    asnDTimeOffset  offset;  /* optional; set in bit_mask asnoffset_present if
                              * present */
                             /* time zone */
} asnDDateTime;

typedef struct asnFullPositionVector {
    unsigned char   bit_mask;
#       define      asnutcTime_present 0x80
#       define      asnFullPositionVector_heading_present 0x40
#       define      asnFullPositionVector_transmission_present 0x20
#       define      asnFullPositionVector_speed_present 0x10
#       define      asnFullPositionVector_posAccuracy_present 0x08
#       define      asnFullPositionVector_timeConfidence_present 0x04
#       define      asnFullPositionVector_motionCfd_present 0x02
    asnDDateTime    utcTime;  /* optional; set in bit_mask asnutcTime_present if
                               * present */
                              /* time with mSec precision */
    asnPosition3D   pos;
    asnHeading      heading;  /* optional; set in bit_mask
                               * asnFullPositionVector_heading_present if
                               * present */
    asnTransmissionState transmission;  /* optional; set in bit_mask
                                * asnFullPositionVector_transmission_present if
                                * present */
    asnSpeed        speed;  /* optional; set in bit_mask
                             * asnFullPositionVector_speed_present if present */
    asnPositionConfidenceSet posAccuracy;  /* optional; set in bit_mask
                                 * asnFullPositionVector_posAccuracy_present if
                                 * present */
    asnTimeConfidence timeConfidence;  /* optional; set in bit_mask
                              * asnFullPositionVector_timeConfidence_present if
                              * present */
    asnMotionConfidenceSet motionCfd;  /* optional; set in bit_mask
                                   * asnFullPositionVector_motionCfd_present if
                                   * present */
} asnFullPositionVector;

typedef struct asnGNSSstatus {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} asnGNSSstatus;
#define                     asnGNSSstatus_unavailable 0x80 /* Not Equipped or unavailable */
#define                     asnGNSSstatus_unavailable_byte 0
#define                     asnisHealthy 0x40
#define                     asnisHealthy_byte 0
#define                     asnisMonitored 0x20
#define                     asnisMonitored_byte 0
#define                     asnbaseStationType 0x10 /* Set to zero if a moving base station, */
#define                     asnbaseStationType_byte 0
		/* or if a rover device (an OBU), */
		/* set to one if it is a fixed base station */
#define                     asnaPDOPofUnder5 0x08 /* A dilution of precision greater than 5 */
#define                     asnaPDOPofUnder5_byte 0
#define                     asninViewOfUnder5 0x04 /* Less than 5 satellites in view */
#define                     asninViewOfUnder5_byte 0
#define                     asnlocalCorrectionsPresent 0x02 /* pseudo range corrections used */
#define                     asnlocalCorrectionsPresent_byte 0
#define                     asnnetworkCorrectionsPresent 0x01 /* RTK type corrections used */
#define                     asnnetworkCorrectionsPresent_byte 0

typedef struct asnPathHistory {
    unsigned char   bit_mask;
#       define      asninitialPosition_present 0x80
#       define      asncurrGNSSstatus_present 0x40
    asnFullPositionVector initialPosition;  /* optional; set in bit_mask
                                             * asninitialPosition_present if
                                             * present */
    asnGNSSstatus   currGNSSstatus;  /* optional; set in bit_mask
                                      * asncurrGNSSstatus_present if present */
    struct asnPathHistoryPointList *crumbData;
} asnPathHistory;

	/* Units of 0.5 percent */
typedef short           asnRadiusOfCurvature;

typedef unsigned short  asnConfidence;

typedef struct asnPathPrediction {
    asnRadiusOfCurvature radiusOfCurve;
		/* Units of 10cm */
		/* straight path to use value of 32767 */
    asnConfidence   confidence;
		/* Units of 0.5 percent */
} asnPathPrediction;

typedef struct asnExteriorLights {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} asnExteriorLights;
		/* All lights off is indicated by no bits set */
#define                     asnlowBeamHeadlightsOn 0x80
#define                     asnlowBeamHeadlightsOn_byte 0
#define                     asnhighBeamHeadlightsOn 0x40
#define                     asnhighBeamHeadlightsOn_byte 0
#define                     asnleftTurnSignalOn 0x20
#define                     asnleftTurnSignalOn_byte 0
#define                     asnrightTurnSignalOn 0x10
#define                     asnrightTurnSignalOn_byte 0
#define                     asnhazardSignalOn 0x08
#define                     asnhazardSignalOn_byte 0
#define                     asnautomaticLightControlOn 0x04
#define                     asnautomaticLightControlOn_byte 0
#define                     asndaytimeRunningLightsOn 0x02
#define                     asndaytimeRunningLightsOn_byte 0
#define                     asnfogLightOn 0x01
#define                     asnfogLightOn_byte 0
#define                     asnparkingLightsOn 0x80
#define                     asnparkingLightsOn_byte 1

typedef struct asnVehicleSafetyExtensions {
    unsigned char   bit_mask;
#       define      asnevents_present 0x80
#       define      asnVehicleSafetyExtensions_pathHistory_present 0x40
#       define      asnpathPrediction_present 0x20
#       define      asnVehicleSafetyExtensions_lights_present 0x10
    asnVehicleEventFlags events;  /* optional; set in bit_mask asnevents_present
                                   * if present */
    asnPathHistory  pathHistory;  /* optional; set in bit_mask
                            * asnVehicleSafetyExtensions_pathHistory_present if
                            * present */
    asnPathPrediction pathPrediction;  /* optional; set in bit_mask
                                        * asnpathPrediction_present if
                                        * present */
    asnExteriorLights lights;  /* optional; set in bit_mask
                                * asnVehicleSafetyExtensions_lights_present if
                                * present */
} asnVehicleSafetyExtensions;

typedef enum asnResponseType {
    asnnotInUseOrNotEquipped = 0,
    asnemergency = 1, /* active service call at emergency level */
    asnnonEmergency = 2, /* also used when returning from service call */
    asnpursuit = 3, /* sender driving may be erratic */
    asnstationary = 4, /* sender is not moving, stopped along roadside */
    asnslowMoving = 5, /* such a litter trucks, etc. */
    asnstopAndGoMovement = 6 /* such as school bus or garbage truck */
} asnResponseType;

typedef enum asnSirenInUse {
    asnSirenInUse_unavailable = 0, /* Not Equipped or unavailable */
    asnSirenInUse_notInUse = 1,
    asnSirenInUse_inUse = 2,
    asnSirenInUse_reserved = 3 /* for future use */
} asnSirenInUse;

typedef enum asnLightbarInUse {
    asnLightbarInUse_unavailable = 0, /* Not Equipped or unavailable */
    asnLightbarInUse_notInUse = 1, /* none active */
    asnLightbarInUse_inUse = 2,
    asnyellowCautionLights = 3,
    asnschooldBusLights = 4,
    asnarrowSignsActive = 5,
    asnslowMovingVehicle = 6,
    asnfreqStops = 7
} asnLightbarInUse;

	/* type assignments	*/
typedef struct asnVehicleEmergencyExtensions {
    unsigned char   bit_mask;
#       define      asnresponseType_present 0x80
#       define      asnsirenUse_present 0x40
#       define      asnlightsUse_present 0x20
    asnResponseType responseType;  /* optional; set in bit_mask
                                    * asnresponseType_present if present */
    asnSirenInUse   sirenUse;  /* optional; set in bit_mask asnsirenUse_present
                                * if present */
    asnLightbarInUse lightsUse;  /* optional; set in bit_mask
                                  * asnlightsUse_present if present */
} asnVehicleEmergencyExtensions;

typedef struct asn_octet1 {
    unsigned short  length;
    unsigned char   value[8];
} asn_octet1;

typedef struct asnBasicSafetyMessage {
    unsigned char   bit_mask;
#       define      asnBasicSafetyMessage_timeConfidence_present 0x80
#       define      asnBasicSafetyMessage_posAccuracy_present 0x40
#       define      asnposConfidence_present 0x20
#       define      asnBasicSafetyMessage_angle_present 0x10
#       define      asnBasicSafetyMessage_motionCfd_present 0x08
#       define      asnsafetyExt_present 0x04
#       define      asnemergencyExt_present 0x02
    asnMsgCount     msgCnt;
    asn_octet1      id;
		/* temperary vehicle ID */
    asnDSecond      secMark;
    asnTimeConfidence timeConfidence;  /* optional; set in bit_mask
                              * asnBasicSafetyMessage_timeConfidence_present if
                              * present */
    asnPosition3D   pos;
    asnPositionalAccuracy posAccuracy;  /* optional; set in bit_mask
                                 * asnBasicSafetyMessage_posAccuracy_present if
                                 * present */
		/* Accuracy for GNSS system */
    asnPositionConfidenceSet posConfidence;  /* optional; set in bit_mask
                                              * asnposConfidence_present if
                                              * present */
		/* Realtime position confidence */
    asnTransmissionState transmission;
    asnSpeed        speed;
    asnHeading      heading;
    asnSteeringWheelAngle angle;  /* optional; set in bit_mask
                                   * asnBasicSafetyMessage_angle_present if
                                   * present */
    asnMotionConfidenceSet motionCfd;  /* optional; set in bit_mask
                                   * asnBasicSafetyMessage_motionCfd_present if
                                   * present */
    asnAccelerationSet4Way accelSet;
    asnBrakeSystemStatus brakes;
    asnVehicleSize  size;
    asnVehicleClassification vehicleClass;
		/* VehicleClassification includes BasicVehicleClass and other extendible type */
    asnVehicleSafetyExtensions safetyExt;  /* optional; set in bit_mask
                                            * asnsafetyExt_present if present */
    asnVehicleEmergencyExtensions emergencyExt;  /* optional; set in bit_mask
                                                  * asnemergencyExt_present if
                                                  * present */
} asnBasicSafetyMessage;

	/* Units of 0.0125 degrees */
	/* A range of 0 to 359.9875 degrees */
typedef unsigned short  asnCoarseHeading;

typedef short           asnOffsetLL_B12;

	/* A range of +- 0.8388607 degrees */
	/* Units of 0.1 microdegrees */
typedef struct asnPosition_LL_24B {
		/* ranges of +- 0.0002047 degrees */
		/* ranges of +- 22.634554 meters at the equator */
    asnOffsetLL_B12 lon;
    asnOffsetLL_B12 lat;
} asnPosition_LL_24B;

	/* A range of +- 0.0002047 degrees */
	/* Units of 0.1 microdegrees */
typedef short           asnOffsetLL_B14;

typedef struct asnPosition_LL_28B {
		/* ranges of +- 0.0008191 degrees */
		/* ranges of +- 90.571389 meters at the equator */
    asnOffsetLL_B14 lon;
    asnOffsetLL_B14 lat;
} asnPosition_LL_28B;

	/* A range of +- 0.0008191 degrees */
	/* Units of 0.1 microdegrees */
typedef short           asnOffsetLL_B16;

typedef struct asnPosition_LL_32B {
		/* ranges of +- 0.0032767 degrees */
		/* ranges of +- 362.31873 meters at the equator */
    asnOffsetLL_B16 lon;
    asnOffsetLL_B16 lat;
} asnPosition_LL_32B;

	/* A range of +- 0.0032767 degrees */
	/* Units of 0.1 microdegrees */
typedef int             asnOffsetLL_B18;

typedef struct asnPosition_LL_36B {
		/* ranges of +- 0.0131071 degrees */
		/* ranges of +- 01.449308 Kmeters at the equator */
    asnOffsetLL_B18 lon;
    asnOffsetLL_B18 lat;
} asnPosition_LL_36B;

	/* A range of +- 0.0131071 degrees */
	/* Units of 0.1 microdegrees */
typedef int             asnOffsetLL_B22;

typedef struct asnPosition_LL_44B {
		/* ranges of +- 0.2097151 degrees */
		/* ranges of +- 23.189096 Kmeters at the equator */
    asnOffsetLL_B22 lon;
    asnOffsetLL_B22 lat;
} asnPosition_LL_44B;

	/* A range of +- 0.2097151 degrees */
	/* Units of 0.1 microdegrees */
typedef int             asnOffsetLL_B24;

typedef struct asnPosition_LL_48B {
		/* ranges of +- 0.8388607 degrees */
		/* ranges of +- 92.756481 Kmeters at the equator */
    asnOffsetLL_B24 lon;
    asnOffsetLL_B24 lat;
} asnPosition_LL_48B;

typedef struct asnPosition_LLmD_64b {
		/* a full 32b Lat/Lon range */
    asnLongitude    lon;
    asnLatitude     lat;
} asnPosition_LLmD_64b;

typedef struct asnPositionOffsetLL {
    unsigned short  choice;
#       define      asnposition_LL1_chosen 1
#       define      asnposition_LL2_chosen 2
#       define      asnposition_LL3_chosen 3
#       define      asnposition_LL4_chosen 4
#       define      asnposition_LL5_chosen 5
#       define      asnposition_LL6_chosen 6
#       define      asnposition_LatLon_chosen 7
    union {
		/* Locations with LL content Span at the equator when using a zoom of one: */
        asnPosition_LL_24B position_LL1;  /* to choose, set choice to
                                           * asnposition_LL1_chosen */
		/* within +- 22.634554 meters of the reference position */
        asnPosition_LL_28B position_LL2;  /* to choose, set choice to
                                           * asnposition_LL2_chosen */
		/* within +- 90.571389 meters of the reference position */
        asnPosition_LL_32B position_LL3;  /* to choose, set choice to
                                           * asnposition_LL3_chosen */
		/* within +- 362.31873 meters of the reference position */
        asnPosition_LL_36B position_LL4;  /* to choose, set choice to
                                           * asnposition_LL4_chosen */
		/* within +- 01.449308 Kmeters of the reference position */
        asnPosition_LL_44B position_LL5;  /* to choose, set choice to
                                           * asnposition_LL5_chosen */
		/* within +- 23.189096 Kmeters of the reference position */
        asnPosition_LL_48B position_LL6;  /* to choose, set choice to
                                           * asnposition_LL6_chosen */
		/* within +- 92.756481 Kmeters of the reference position */
        asnPosition_LLmD_64b position_LatLon;  /* to choose, set choice to
                                                * asnposition_LatLon_chosen */
		/* node is a Lat/Lon absolute coordinates */
		/* not a reference position */
    } u;
} asnPositionOffsetLL;

typedef short           asnVertOffset_B07;

	/* Units of of 10 cm */
	/* with a range of +- 6.3 meters vertical */
	/* value 63 to be used for 63 or greater */
	/* value -63 to be used for -63 or greater */
	/* value -64 to be unavailable */
typedef short           asnVertOffset_B08;

	/* Units of of 10 cm */
	/* with a range of +- 12.7 meters vertical */
	/* value 127 to be used for 127 or greater */
	/* value -127 to be used for -127 or greater */
	/* value -128 to be unavailable */
typedef short           asnVertOffset_B09;

	/* Units of of 10 cm */
	/* with a range of +- 25.5 meters vertical */
	/* value 255 to be used for 255 or greater */
	/* value -255 to be used for -255 or greater */
	/* value -256 to be unavailable */
typedef short           asnVertOffset_B10;

	/* Units of of 10 cm */
	/* with a range of +- 51.1 meters vertical */
	/* value 511 to be used for 511 or greater */
	/* value -511 to be used for -511 or greater */
	/* value -512 to be unavailable */
typedef short           asnVertOffset_B11;

	/* Units of of 10 cm */
	/* with a range of +- 102.3 meters vertical */
	/* value 1023 to be used for 1023 or greater */
	/* value -1023 to be used for -1023 or greater */
	/* value -1024 to be unavailable */
typedef short           asnVertOffset_B12;

typedef struct asnVerticalOffset {
    unsigned short  choice;
#       define      asnoffset1_chosen 1
#       define      asnoffset2_chosen 2
#       define      asnoffset3_chosen 3
#       define      asnoffset4_chosen 4
#       define      asnoffset5_chosen 5
#       define      asnoffset6_chosen 6
#       define      asnelevation_chosen 7
    union {
		/* Vertical Offset */
		/* All below in steps of 10cm above or below the reference ellipsoid */
        asnVertOffset_B07 offset1;  /* to choose, set choice to
                                     * asnoffset1_chosen */
                                    /* with a range of +- 6.3 meters vertical */
        asnVertOffset_B08 offset2;  /* to choose, set choice to
                                     * asnoffset2_chosen */
                                    /* with a range of +- 12.7 meters vertical */
        asnVertOffset_B09 offset3;  /* to choose, set choice to
                                     * asnoffset3_chosen */
                                    /* with a range of +- 25.5 meters vertical */
        asnVertOffset_B10 offset4;  /* to choose, set choice to
                                     * asnoffset4_chosen */
                                    /* with a range of +- 51.1 meters vertical */
        asnVertOffset_B11 offset5;  /* to choose, set choice to
                                     * asnoffset5_chosen */
                                    /* with a range of +- 102.3 meters vertical */
        asnVertOffset_B12 offset6;  /* to choose, set choice to
                                     * asnoffset6_chosen */
                                    /* with a range of +- 204.7 meters vertical */
        asnElevation    elevation;  /* to choose, set choice to
                                     * asnelevation_chosen */
                                    /* with a range of -409.5 to + 6143.9 meters */
    } u;
} asnVerticalOffset;

typedef struct asnPositionOffsetLLV {
    unsigned char   bit_mask;
#       define      asnoffsetV_present 0x80
    asnPositionOffsetLL offsetLL;
		/* offset in lon/lat */
    asnVerticalOffset offsetV;  /* optional; set in bit_mask asnoffsetV_present
                                 * if present */
		/* offset in elevation */
} asnPositionOffsetLLV;

typedef unsigned int    asnMinuteOfTheYear;

	/* the value 527040 shall be used for invalid */
typedef unsigned short  asnTimeMark;

	/* Tenths of a second in the current or next hour */
	/* In units of 1/10th second from UTC time */
	/* A range of 0~36000 covers one hour */
	/* The values 35991..35999 are used when a leap second occurs */
	/* The value 36000 is used to indicate time >3600 seconds */
	/* 36001 is to be used when value undefined or unknown */
	/* Note that this is NOT expressed in GNSS time */
	/* or in local time */
typedef unsigned short  asnTimeOffset;

typedef struct asnMapData {
    unsigned char   bit_mask;
#       define      asnMapData_timeStamp_present 0x80
    asnMsgCount     msgCnt;
    asnMinuteOfTheYear timeStamp;  /* optional; set in bit_mask
                                    * asnMapData_timeStamp_present if present */
    struct asnNodeList *nodes;
		/* intersections or road endpoints */
} asnMapData;

typedef char            asnDescriptiveName[64];

typedef unsigned short  asnRoadRegulatorID;

	/* The value zero shall be used for testing only */
typedef unsigned short  asnNodeID;

typedef struct asnNodeReferenceID {
    unsigned char   bit_mask;
#       define      asnregion_present 0x80
    asnRoadRegulatorID region;  /* optional; set in bit_mask asnregion_present
                                 * if present */
		/* a globally unique regional assignment value */
		/* typical assigned to a regional DOT authority */
		/* the value zero shall be used for testing needs */
    asnNodeID       id;
		/* a unique mapping to the node */
		/* in question within the above region of use		*/
} asnNodeReferenceID;

typedef struct asn_seqof1 {
    struct asn_seqof1 *next;
    struct asnPolygon *value;
} *asn_seqof1;

typedef struct asnProhibitedZone {
    unsigned char   bit_mask;
#       define      asncentralCircleProhibitedZone_present 0x80
#       define      asnnon_motorVehicleProhibitedZones_present 0x40
#       define      asngridLineMarkingProhibitedZones_present 0x20
    struct asnPolygon *centralCircleProhibitedZone;  /* optional; set in
                                   * bit_mask
                                   * asncentralCircleProhibitedZone_present if
                                   * present */
    struct asn_seqof1 *non_motorVehicleProhibitedZones;  /* optional; set in
                                   * bit_mask
                                   * asnnon_motorVehicleProhibitedZones_present
                                   * if present */
    struct asn_seqof1 *gridLineMarkingProhibitedZones;  /* optional; set in
                                   * bit_mask
                                   * asngridLineMarkingProhibitedZones_present
                                   * if present */
		/* Gird line marking prohibited zones */
		/* inside the node(intersection) or at the in-links of this node */
} asnProhibitedZone;

typedef struct asnNode {
    unsigned char   bit_mask;
#       define      asnNode_name_present 0x80
#       define      asninLinks_present 0x40
#       define      asninLinks_ex_present 0x20
#       define      asnprohibitedzone_present 0x10
		/* intersection or road endpoint */
    asnDescriptiveName name;  /* optional; set in bit_mask asnNode_name_present
                               * if present */
		/* Node name */
    asnNodeReferenceID id;
		/* A globally unique value set, */
		/* consisting of a regionID and */
		/* node ID assignment */
    asnPosition3D   refPos;
		/* 3D position of the center of this Node. */
		/* This position is also the reference position for the elements inside */

		/* Link list using Day I format *//**//**//**//**//**//**//**//**//**/
    struct asnLinkList *inLinks;  /* optional; set in bit_mask
                                   * asninLinks_present if present */
		/* all the links enter this Node */
		/* Day II Extension*//**//**//**//**//**//**//**//**//**/
    struct asnLinkExList *inLinks_ex;  /* extension #1; optional; set in
                                        * bit_mask asninLinks_ex_present if
                                        * present */
		/* all the links enter this Node */
    asnProhibitedZone prohibitedzone;  /* extension #2; optional; set in
                                   * bit_mask asnprohibitedzone_present if
                                   * present */
} asnNode;

typedef struct asnNodeList {
    struct asnNodeList *next;
    asnNode         value;
} *asnNodeList;

	/* the value 0 shall be used when the lane ID is */
	/* not available or not known */
	/* the value 255 is reserved for future use */
typedef unsigned short  asnLaneWidth;

typedef struct asnLink {
    unsigned char   bit_mask;
#       define      asnLink_name_present 0x80
#       define      asnLink_speedLimits_present 0x40
#       define      asnLink_points_present 0x20
#       define      asnLink_movements_present 0x10
    asnDescriptiveName name;  /* optional; set in bit_mask asnLink_name_present
                               * if present */
		/* Link name */
    asnNodeReferenceID upstreamNodeId;
		/* this link is from upstreamNode to the Node it belongs to */
    struct asnSpeedLimitList *speedLimits;  /* optional; set in bit_mask
                                             * asnLink_speedLimits_present if
                                             * present */
		/* List all the speed limits */
    asnLaneWidth    linkWidth;
		/* Width of this link */
    struct asnPointList *points;  /* optional; set in bit_mask
                                   * asnLink_points_present if present */
		/* Define road points along the center of this link */
    struct asnMovementList *movements;  /* optional; set in bit_mask
                                         * asnLink_movements_present if
                                         * present */
		/* Define movements at intersection */
    struct asnLaneList *lanes;
		/* Lanes belong to this link */
} asnLink;

	/* The values zero through 255 are allocated for testing purposes */
	/* Note that the value assigned to a node will be */
	/* unique within a given regional ID only */
typedef struct asnLinkList {
    struct asnLinkList *next;
    asnLink         value;
} *asnLinkList;

typedef unsigned short  asnPhaseID;

typedef struct asnMovement {
    unsigned char   bit_mask;
#       define      asnMovement_phaseId_present 0x80
    asnNodeReferenceID remoteIntersection;
		/* This entry indicates the downstream intersection of the link this lane connects to. */
		/* This provides a means to create meshes of lanes */
    asnPhaseID      phaseId;  /* optional; set in bit_mask
                               * asnMovement_phaseId_present if present */
		/* The matching signal group send by */
		/* the SPAT message for this lane/maneuver. */
		/* Shall be present unless the connectingLane */
		/* has no signal group (is un-signalized) */
} asnMovement;

typedef struct asnMovementList {
    struct asnMovementList *next;
    asnMovement     value;
} *asnMovementList;

typedef unsigned short  asnLaneID;

typedef struct asnLaneSharing {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} asnLaneSharing;
		/* With bits as defined: */
#define                     asnoverlappingLaneDescriptionProvided 0x80
#define                     asnoverlappingLaneDescriptionProvided_byte 0
		/* Assert when another lane object is present to describe the */
		/* path of the overlapping shared lane */
		/* this construct is not used for lane objects which simply cross */
#define                     asnmultipleLanesTreatedAsOneLane 0x40
#define                     asnmultipleLanesTreatedAsOneLane_byte 0
		/* Assert if the lane object path and width details represents */
		/* multiple lanes within it that are not further described */
		/* Various modes and type of traffic that may share this lane: */
#define                     asnotherNonMotorizedTrafficTypes 0x20 /* horse drawn etc. */
#define                     asnotherNonMotorizedTrafficTypes_byte 0
#define                     asnindividualMotorizedVehicleTraffic 0x10
#define                     asnindividualMotorizedVehicleTraffic_byte 0
#define                     asnbusVehicleTraffic 0x08
#define                     asnbusVehicleTraffic_byte 0
#define                     asntaxiVehicleTraffic 0x04
#define                     asntaxiVehicleTraffic_byte 0
#define                     asnpedestriansTraffic 0x02
#define                     asnpedestriansTraffic_byte 0
#define                     asncyclistVehicleTraffic 0x01
#define                     asncyclistVehicleTraffic_byte 0
#define                     asntrackedVehicleTraffic 0x80
#define                     asntrackedVehicleTraffic_byte 1
#define                     asnpedestrianTraffic 0x40
#define                     asnpedestrianTraffic_byte 1

typedef struct asnLaneAttributes_Vehicle {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} asnLaneAttributes_Vehicle;
		/* With bits as defined: */
#define                     asnisVehicleRevocableLane 0x80
#define                     asnisVehicleRevocableLane_byte 0
		/* this lane may be activated or not based */
		/* on the current SPAT message contents */
		/* if not asserted, the lane is ALWAYS present */
#define                     asnisRampLane 0x40
#define                     asnisRampLane_byte 0
		/* Redefined in Day II Standard */
#define                     asnhovLaneUseOnly 0x20
#define                     asnhovLaneUseOnly_byte 0
#define                     asnrestrictedToBusUse 0x10
#define                     asnrestrictedToBusUse_byte 0
#define                     asnrestrictedToTaxiUse 0x08
#define                     asnrestrictedToTaxiUse_byte 0
#define                     asnrestrictedFromPublicUse 0x04
#define                     asnrestrictedFromPublicUse_byte 0
#define                     asnemergencyLane 0x02
#define                     asnemergencyLane_byte 0
		/* Redefined in Day II Standard */
#define                     asnpermissionOnRequest 0x01
		/* e.g. to inform about a lane for e-cars */
#define                     asnpermissionOnRequest_byte 0

typedef struct asnLaneAttributes_Crosswalk {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} asnLaneAttributes_Crosswalk;
		/* With bits as defined: */
		/* MUTCD provides no suitable "types" to use here */
#define                     asncrosswalkRevocableLane 0x80
#define                     asncrosswalkRevocableLane_byte 0
		/* this lane may be activated or not based */
		/* on the current SPAT message contents */
		/* if not asserted, the lane is ALWAYS present */
#define                     asnLaneAttributes_Crosswalk_bicyleUseAllowed 0x40
#define                     asnLaneAttributes_Crosswalk_bicyleUseAllowed_byte 0
		/* The path allows bicycle traffic, */
		/* if not set, this mode is prohibited */
#define                     asnisXwalkFlyOverLane 0x20
#define                     asnisXwalkFlyOverLane_byte 0
		/* path of lane is not at grade */
#define                     asnLaneAttributes_Crosswalk_fixedCycleTime 0x10
#define                     asnLaneAttributes_Crosswalk_fixedCycleTime_byte 0
		/* ped walk phases use preset times */
		/* i.e. there is not a 'push to cross' button */
#define                     asnLaneAttributes_Crosswalk_biDirectionalCycleTimes 0x08
#define                     asnLaneAttributes_Crosswalk_biDirectionalCycleTimes_byte 0
		/* ped walk phases use different SignalGroupID */
		/* for each direction. The first SignalGroupID */
		/* in the first Connection represents 'inbound' */
		/* flow (the direction of travel towards the first */
		/* node point) while second SignalGroupID in the */
		/* next Connection entry represents the 'outbound' */
		/* flow. And use of RestrictionClassID entries */
		/* in the Connect follow this same pattern in pairs. */
#define                     asnhasPushToWalkButton 0x04
#define                     asnhasPushToWalkButton_byte 0
		/* Has a demand input */
#define                     asnaudioSupport 0x02
#define                     asnaudioSupport_byte 0
		/* audio crossing cues present */
#define                     asnrfSignalRequestPresent 0x01
#define                     asnrfSignalRequestPresent_byte 0
		/* Supports RF push to walk technologies */
#define                     asnLaneAttributes_Crosswalk_unsignalizedSegmentsPresent 0x80
		/* The lane path consists of one of more segments */
		/* which are not part of a signal group ID */
		/* Bits 9~15 reserved and set to zero */
#define                     asnLaneAttributes_Crosswalk_unsignalizedSegmentsPresent_byte 1

typedef struct asnLaneAttributes_Bike {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} asnLaneAttributes_Bike;
		/* With bits as defined: */
#define                     asnbikeRevocableLane 0x80
#define                     asnbikeRevocableLane_byte 0
		/* this lane may be activated or not based */
		/* on the current SPAT message contents */
		/* if not asserted, the lane is ALWAYS present */
#define                     asnpedestrianUseAllowed 0x40
#define                     asnpedestrianUseAllowed_byte 0
		/* The path allows pedestrian traffic, */
		/* if not set, this mode is prohibited */
#define                     asnisBikeFlyOverLane 0x20
#define                     asnisBikeFlyOverLane_byte 0
		/* path of lane is not at grade */
#define                     asnLaneAttributes_Bike_fixedCycleTime 0x10
#define                     asnLaneAttributes_Bike_fixedCycleTime_byte 0
		/* the phases use preset times */
		/* i.e. there is not a 'push to cross' button */
#define                     asnLaneAttributes_Bike_biDirectionalCycleTimes 0x08
#define                     asnLaneAttributes_Bike_biDirectionalCycleTimes_byte 0
		/* ped walk phases use different SignalGroupID */
		/* for each direction. The first SignalGroupID */
		/* in the first Connection represents 'inbound' */
		/* flow (the direction of travel towards the first */
		/* node point) while second SignalGroupID in the */
		/* next Connection entry represents the 'outbound' */
		/* flow. And use of RestrictionClassID entries */
		/* in the Connect follow this same pattern in pairs. */
#define                     asnisolatedByBarrier 0x04
#define                     asnisolatedByBarrier_byte 0
#define                     asnLaneAttributes_Bike_unsignalizedSegmentsPresent 0x02
		/* The lane path consists of one of more segments */
		/* which are not part of a signal group ID */
		/* Bits 7~15 reserved and set to zero */
#define                     asnLaneAttributes_Bike_unsignalizedSegmentsPresent_byte 0

typedef struct asnLaneAttributes_Sidewalk {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} asnLaneAttributes_Sidewalk;
		/* With bits as defined: */
#define                     asnsidewalk_RevocableLane 0x80
#define                     asnsidewalk_RevocableLane_byte 0
		/* this lane may be activated or not based */
		/* on the current SPAT message contents */
		/* if not asserted, the lane is ALWAYS present */
#define                     asnLaneAttributes_Sidewalk_bicyleUseAllowed 0x40
#define                     asnLaneAttributes_Sidewalk_bicyleUseAllowed_byte 0
		/* The path allows bicycle traffic, */
		/* if not set, this mode is prohibited */
#define                     asnisSidewalkFlyOverLane 0x20
#define                     asnisSidewalkFlyOverLane_byte 0
		/* path of lane is not at grade */
#define                     asnwalkBikes 0x10
		/* bike traffic must dismount and walk */
		/* Bits 4~15 reserved and set to zero */
#define                     asnwalkBikes_byte 0

typedef struct asnLaneAttributes_Barrier {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} asnLaneAttributes_Barrier;
		/* With bits as defined: */
#define                     asnmedian_RevocableLane 0x80
#define                     asnmedian_RevocableLane_byte 0
		/* this lane may be activated or not based */
		/* on the current SPAT message contents */
		/* if not asserted, the lane is ALWAYS present */
#define                     asnLaneAttributes_Barrier_median 0x40
#define                     asnLaneAttributes_Barrier_median_byte 0
#define                     asnwhiteLineHashing 0x20
#define                     asnwhiteLineHashing_byte 0
#define                     asnstripedLines 0x10
#define                     asnstripedLines_byte 0
#define                     asndoubleStripedLines 0x08
#define                     asndoubleStripedLines_byte 0
#define                     asntrafficCones 0x04
#define                     asntrafficCones_byte 0
#define                     asnconstructionBarrier 0x02
#define                     asnconstructionBarrier_byte 0
#define                     asntrafficChannels 0x01
#define                     asntrafficChannels_byte 0
#define                     asnlowCurbs 0x80
#define                     asnlowCurbs_byte 1
#define                     asnhighCurbs 0x40 /* Bits 10~15 reserved and set to zero */
#define                     asnhighCurbs_byte 1

typedef struct asnLaneAttributes_Striping {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} asnLaneAttributes_Striping;
		/* With bits as defined: */
#define                     asnstripeToConnectingLanesRevocableLane 0x80
#define                     asnstripeToConnectingLanesRevocableLane_byte 0
		/* this lane may be activated or not activated based */
		/* on the current SPAT message contents */
		/* if not asserted, the lane is ALWAYS present */
#define                     asnstripeDrawOnLeft 0x40
#define                     asnstripeDrawOnLeft_byte 0
#define                     asnstripeDrawOnRight 0x20
#define                     asnstripeDrawOnRight_byte 0
		/* which side of lane to mark */
#define                     asnstripeToConnectingLanesLeft 0x10
#define                     asnstripeToConnectingLanesLeft_byte 0
#define                     asnstripeToConnectingLanesRight 0x08
#define                     asnstripeToConnectingLanesRight_byte 0
#define                     asnstripeToConnectingLanesAhead 0x04
		/* the stripe type should be */
		/* presented to the user visually */
		/* to reflect stripes in the */
		/* intersection for the type of */
		/* movement indicated */
		/* Bits 6~15 reserved and set to zero */
#define                     asnstripeToConnectingLanesAhead_byte 0

typedef struct asnLaneAttributes_TrackedVehicle {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} asnLaneAttributes_TrackedVehicle;
		/* With bits as defined: */
#define                     asnspec_RevocableLane 0x80
#define                     asnspec_RevocableLane_byte 0
		/* this lane may be activated or not based */
		/* on the current SPAT message contents */
		/* if not asserted, the lane is ALWAYS present */
#define                     asnspec_commuterRailRoadTrack 0x40
#define                     asnspec_commuterRailRoadTrack_byte 0
#define                     asnspec_lightRailRoadTrack 0x20
#define                     asnspec_lightRailRoadTrack_byte 0
#define                     asnspec_heavyRailRoadTrack 0x10
#define                     asnspec_heavyRailRoadTrack_byte 0
#define                     asnspec_otherRailType 0x08 /* Bits 5~15 reserved and set to zero */
#define                     asnspec_otherRailType_byte 0

typedef struct asnLaneAttributes_Parking {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} asnLaneAttributes_Parking;
		/* With bits as defined: */
		/* Parking use details, note that detailed restrictions such as */
		/* allowed hours are sent by way of ITIS codes in the TIM message */
#define                     asnparkingRevocableLane 0x80
#define                     asnparkingRevocableLane_byte 0
		/* this lane may be activated or not based */
		/* on the current SPAT message contents */
		/* if not asserted, the lane is ALWAYS present */
#define                     asnparallelParkingInUse 0x40
#define                     asnparallelParkingInUse_byte 0
#define                     asnheadInParkingInUse 0x20
#define                     asnheadInParkingInUse_byte 0
#define                     asndoNotParkZone 0x10
#define                     asndoNotParkZone_byte 0
		/* used to denote fire hydrants as well as */
		/* short disruptions in a parking zone */
#define                     asnparkingForBusUse 0x08
#define                     asnparkingForBusUse_byte 0
#define                     asnparkingForTaxiUse 0x04
#define                     asnparkingForTaxiUse_byte 0
#define                     asnnoPublicParkingUse 0x02
		/* private parking, as in front of */
		/* private property */
		/* Bits 7~15 reserved and set to zero */
#define                     asnnoPublicParkingUse_byte 0

		/* All zeros would indicate 'not shared' and 'not overlapping' */
typedef struct asnLaneTypeAttributes {
    unsigned short  choice;
#       define      asnvehicle_chosen 1
#       define      asncrosswalk_chosen 2
#       define      asnbikeLane_chosen 3
#       define      asnsidewalk_chosen 4
#       define      asnmedian_chosen 5
#       define      asnstriping_chosen 6
#       define      asntrackedVehicle_chosen 7
#       define      asnLaneTypeAttributes_parking_chosen 8
    union {
        asnLaneAttributes_Vehicle vehicle;  /* to choose, set choice to
                                             * asnvehicle_chosen */
                                            /* motor vehicle lanes */
        asnLaneAttributes_Crosswalk crosswalk;  /* to choose, set choice to
                                                 * asncrosswalk_chosen */
                                                /* pedestrian crosswalks */
        asnLaneAttributes_Bike bikeLane;  /* to choose, set choice to
                                           * asnbikeLane_chosen */
                                          /* bike lanes */
        asnLaneAttributes_Sidewalk sidewalk;  /* to choose, set choice to
                                               * asnsidewalk_chosen */
                                              /* pedestrian sidewalk paths */
        asnLaneAttributes_Barrier median;  /* to choose, set choice to
                                            * asnmedian_chosen */
                                           /* medians & channelization */
        asnLaneAttributes_Striping striping;  /* to choose, set choice to
                                               * asnstriping_chosen */
                                              /* roadway markings */
        asnLaneAttributes_TrackedVehicle trackedVehicle;  /* to choose, set
                                        * choice to asntrackedVehicle_chosen */
                                                          /* trains and trolleys */
        asnLaneAttributes_Parking parking;  /* to choose, set choice to
                                      * asnLaneTypeAttributes_parking_chosen */
                                            /* parking and stopping lanes */
    } u;
} asnLaneTypeAttributes;

typedef struct asnLaneAttributes {
    unsigned char   bit_mask;
#       define      asnshareWith_present 0x80
    asnLaneSharing  shareWith;  /* optional; set in bit_mask
                                 * asnshareWith_present if present */
    asnLaneTypeAttributes laneType;
} asnLaneAttributes;

typedef struct asnAllowedManeuvers {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} asnAllowedManeuvers;
		/* With bits as defined: */
		/* Allowed maneuvers at path end (stop line) */
		/* All maneuvers with bits not set are therefore prohibited */
		/* A value of zero shall be used for unknown, indicating no Maneuver */
#define                     asnmaneuverStraightAllowed 0x80
#define                     asnmaneuverStraightAllowed_byte 0
		/* a Straight movement is allowed in this lane */
#define                     asnmaneuverLeftAllowed 0x40
#define                     asnmaneuverLeftAllowed_byte 0
		/* a Left Turn movement is allowed in this lane */
#define                     asnmaneuverRightAllowed 0x20
#define                     asnmaneuverRightAllowed_byte 0
		/* a Right Turn movement is allowed in this lane */
#define                     asnmaneuverUTurnAllowed 0x10
#define                     asnmaneuverUTurnAllowed_byte 0
		/* a U turn movement is allowed in this lane */
#define                     asnmaneuverLeftTurnOnRedAllowed 0x08
#define                     asnmaneuverLeftTurnOnRedAllowed_byte 0
		/* a Stop, and then proceed when safe movement */
		/* is allowed in this lane */
#define                     asnmaneuverRightTurnOnRedAllowed 0x04
#define                     asnmaneuverRightTurnOnRedAllowed_byte 0
		/* a Stop, and then proceed when safe movement */
		/* is allowed in this lane */
#define                     asnmaneuverLaneChangeAllowed 0x02
#define                     asnmaneuverLaneChangeAllowed_byte 0
		/* a movement which changes to an outer lane */
		/* on the egress side is allowed in this lane */
		/* (example: left into either outbound lane) */
#define                     asnmaneuverNoStoppingAllowed 0x01
#define                     asnmaneuverNoStoppingAllowed_byte 0
		/* the vehicle should not stop at the stop line */
		/* (example: a flashing green arrow) */
#define                     asnyieldAllwaysRequired 0x80
#define                     asnyieldAllwaysRequired_byte 1
		/* the allowed movements above are not protected */
		/* (example: an permanent yellow condition) */
#define                     asngoWithHalt 0x40
#define                     asngoWithHalt_byte 1
		/* after making a full stop, may proceed */
#define                     asncaution 0x20
#define                     asncaution_byte 1
		/* proceed past stop line with caution */
#define                     asnAllowedManeuvers_reserved1 0x10
		/* used to align to 12 Bit Field */
#define                     asnAllowedManeuvers_reserved1_byte 1

typedef struct asnLane {
    unsigned char   bit_mask;
#       define      asnLane_laneWidth_present 0x80
#       define      asnLane_laneAttributes_present 0x40
#       define      asnLane_maneuvers_present 0x20
#       define      asnconnectsTo_present 0x10
#       define      asnLane_speedLimits_present 0x08
#       define      asnLane_points_present 0x04
    asnLaneID       laneID;
		/* The unique ID number assigned */
		/* to this lane object */
    asnLaneWidth    laneWidth;  /* optional; set in bit_mask
                                 * asnLane_laneWidth_present if present */
    asnLaneAttributes laneAttributes;  /* optional; set in bit_mask
                                        * asnLane_laneAttributes_present if
                                        * present */
		/* Define basic attribute of lane */
    asnAllowedManeuvers maneuvers;  /* optional; set in bit_mask
                                     * asnLane_maneuvers_present if present */
		/* the permitted maneuvers for this lane */
    struct asnConnectsToList *connectsTo;  /* optional; set in bit_mask
                                            * asnconnectsTo_present if
                                            * present */
		/* connection to downsteam lanes */
    struct asnSpeedLimitList *speedLimits;  /* optional; set in bit_mask
                                             * asnLane_speedLimits_present if
                                             * present */
		/* List all the speed limits */
    struct asnPointList *points;  /* optional; set in bit_mask
                                   * asnLane_points_present if present */
		/* Define road points and segments */
} asnLane;

typedef struct asnLaneList {
    struct asnLaneList *next;
    asnLane         value;
} *asnLaneList;

typedef struct asnConnectingLane {
    unsigned char   bit_mask;
#       define      asnmaneuver_present 0x80
    asnLaneID       lane;
		/* Index of the connecting lane */
    asnAllowedManeuvers maneuver;  /* optional; set in bit_mask
                                    * asnmaneuver_present if present */
		/* The Maneuver between */
		/* the enclosing lane and this lane */
		/* at the stop line to connect them */
} asnConnectingLane;

typedef struct asnConnection {
    unsigned char   bit_mask;
#       define      asnConnection_connectingLane_present 0x80
#       define      asnConnection_phaseId_present 0x40
    asnNodeReferenceID remoteIntersection;
		/* This entry indicates the downstream intersection of the link this lane connects to. */
		/* This provides a means to create meshes of lanes */
    asnConnectingLane connectingLane;  /* optional; set in bit_mask
                                        * asnConnection_connectingLane_present
                                        * if present */
		/* The index of the connecting lane and also */
		/* the maneuver from the current lane to it */
		/* When we want to list the allowed lanes of the next link */
		/* this lane can lead to, we use this entry */
    asnPhaseID      phaseId;  /* optional; set in bit_mask
                               * asnConnection_phaseId_present if present */
		/* The matching signal group send by */
		/* the SPAT message for this lane/maneuver. */
		/* Shall be present unless the connectingLane */
		/* has no signal group (is un-signalized) */
} asnConnection;

	/* units of 1 cm */
typedef struct asnConnectsToList {
    struct asnConnectsToList *next;
    asnConnection   value;
} *asnConnectsToList;

typedef enum asnSpeedLimitType {
    asnSpeedLimitType_unknown = 0, /* Speed limit type not available */
    asnmaxSpeedInSchoolZone = 1, /* Only sent when the limit is active */
    asnmaxSpeedInSchoolZoneWhenChildrenArePresent = 2, /* Sent at any time */
    asnmaxSpeedInConstructionZone = 3, /* Used for work zones, incident zones, etc. */
		/* where a reduced speed is present */
    asnvehicleMinSpeed = 4,
    asnvehicleMaxSpeed = 5, /* Regulatory speed limit for general traffic */
    asnvehicleNightMaxSpeed = 6,
    asntruckMinSpeed = 7,
    asntruckMaxSpeed = 8,
    asntruckNightMaxSpeed = 9,
    asnvehiclesWithTrailersMinSpeed = 10,
    asnvehiclesWithTrailersMaxSpeed = 11,
    asnvehiclesWithTrailersNightMaxSpeed = 12
} asnSpeedLimitType;

typedef struct asnRegulatorySpeedLimit {
    asnSpeedLimitType type;
		/* The type of regulatory speed which follows */
    asnSpeed        speed;
		/* The speed in units of 0.02 m/s */
		/* See Section 11 for converting and translating */
		/* speed expressed in mph into units of m/s */
} asnRegulatorySpeedLimit;

typedef struct asnSpeedLimitList {
    struct asnSpeedLimitList *next;
    asnRegulatorySpeedLimit value;
} *asnSpeedLimitList;

	/* At least 2 points of 1 lane */
	/* entry line and exit line */
	/* points need to be listed sequentially */
	/* from upstream to downstream */
typedef struct asnRoadPoint {
    asnPositionOffsetLLV posOffset;
		/* Position offset to the reference position */
} asnRoadPoint;

typedef struct asnPointList {
    struct asnPointList *next;
    asnRoadPoint    value;
} *asnPointList;

typedef struct asnLinkEx {
    unsigned char   bit_mask;
#       define      asnLinkEx_name_present 0x80
#       define      asnLinkEx_speedLimits_present 0x40
#       define      asnlinkWidth_present 0x20
#       define      asnrefLine_present 0x10
#       define      asnmovements_ex_present 0x08
    asnDescriptiveName name;  /* optional; set in bit_mask
                               * asnLinkEx_name_present if present */
		/* Link name */
    asnNodeReferenceID upstreamNodeId;
		/* this link is from upstreamNode to the Node it belongs to */
    struct asnSpeedLimitList *speedLimits;  /* optional; set in bit_mask
                                             * asnLinkEx_speedLimits_present if
                                             * present */
		/* List all the speed limits */
    asnLaneWidth    linkWidth;  /* optional; set in bit_mask
                                 * asnlinkWidth_present if present */
		/* Width of this link */
    struct asnPointList *refLine;  /* optional; set in bit_mask
                                    * asnrefLine_present if present */
		/* Define reference line of this link */
		/* Using the points list from upstream to downstream */
		/* along the center of lane 0 of this link */
		/* Ref. line must cover the whole link, from the link entrance to the stop line */
    struct asnMovementExList *movements_ex;  /* optional; set in bit_mask
                                              * asnmovements_ex_present if
                                              * present */
		/* Define movements at intersection */
    struct asnSectionList *sections;
		/* Link sections belong to this link */
		/* listed from upstream to downstream */
		/* Different sections are generally seperated according to lane increase or decrease */
} asnLinkEx;

	/* Day II Extension*//**//**//**//**//**//**//**//**/
typedef struct asnLinkExList {
    struct asnLinkExList *next;
    asnLinkEx       value;
} *asnLinkExList;

typedef enum asnManeuver {
    asnmaneuverStraight = 0,
    asnmaneuverLeftTurn = 1,
    asnmaneuverRightTurn = 2,
    asnmaneuverUTurn = 3
} asnManeuver;

typedef struct asnMovementEx {
    unsigned char   bit_mask;
#       define      asnMovementEx_phaseId_present 0x80
#       define      asnMovementEx_turn_direction_present 0x40
    asnNodeReferenceID remoteIntersection;
		/* This entry indicates the downstream intersection of the link this lane connects to. */
		/* This provides a means to create meshes of lanes */
    asnPhaseID      phaseId;  /* optional; set in bit_mask
                               * asnMovementEx_phaseId_present if present */
		/* The matching signal group send by */
		/* the SPAT message for this lane/maneuver. */
		/* Shall be present unless the connectingLane */
		/* has no signal group (is un-signalized) */
    asnManeuver     turn_direction;  /* optional; set in bit_mask
                                      * asnMovementEx_turn_direction_present if
                                      * present */
		/* Indicating the turn direction corresponding to this movement */
} asnMovementEx;

typedef struct asnMovementExList {
    struct asnMovementExList *next;
    asnMovementEx   value;
} *asnMovementExList;

typedef unsigned short  asnSectionId;

typedef struct asnSection {
    asnSectionId    secId;
		/* Section id is distributed from upstream to downstream */
		/* with 1, 2, 3, ..., sequentially */
    struct asnLaneExList *lanes;
		/* Lanes belong to this link */
} asnSection;

typedef struct asnSectionList {
    struct asnSectionList *next;
    asnSection      value;
} *asnSectionList;

typedef short           asnLaneRefID;

typedef enum asnDotted_SolidMarkingLineType {
    asnwhiteDottedLine = 0,
    asnwhiteSolidLine = 1,
    asnyellowDottedLine = 2,
    asnyellowSolidLine = 3,
    asnwhiteDotted_solidLine = 4,
		/* 白色虚实线（内侧为虚线） ，可临时跨越同向车道 */
    asnwhiteSotted_dottedLine = 5,
		/* 白色实虚线 （内侧为实线），同向车道可临时跨越至本车道，本车道禁止跨越到同向车道 */
    asnyellowDotted_solidLine = 6,
		/*黄色虚实线（内侧为虚线），可临时跨越对向车道 */
    asnyellowSotted_dottedLine = 7
		/*黄色虚实线（内侧为实线），对向车道可临时跨越至本车道，本车道禁止跨越到对向车道 */
} asnDotted_SolidMarkingLineType;

typedef struct asnLaneLineType {
    asnDotted_SolidMarkingLineType leftLaneLine;
    asnDotted_SolidMarkingLineType rightLaneLine;
} asnLaneLineType;

typedef struct asnLaneEx {
    unsigned char   bit_mask;
#       define      asnLaneEx_laneWidth_present 0x80
#       define      asnLaneEx_laneAttributes_present 0x40
#       define      asnLaneEx_maneuvers_present 0x20
#       define      asnconnectsTo_ex_present 0x10
#       define      asnLaneEx_speedLimits_present 0x08
#       define      asnst_points_present 0x04
#       define      asnlaneLineType_present 0x02
    asnLaneRefID    laneRefID;
		/* Lane reference id related to reference line of this link */
		/* Ref. line belongs to lane ref. id 0 */
		/* Lane ref. ids on the left side of ref. line should be 1, 2, 3... in sequence */
		/* Ref. ids on the right side should be -1, -2, -3... in sequence */
    asnLaneWidth    laneWidth;  /* optional; set in bit_mask
                                 * asnLaneEx_laneWidth_present if present */
    asnLaneAttributes laneAttributes;  /* optional; set in bit_mask
                                        * asnLaneEx_laneAttributes_present if
                                        * present */
		/* Define basic attribute of lane */
    asnAllowedManeuvers maneuvers;  /* optional; set in bit_mask
                                     * asnLaneEx_maneuvers_present if present */
		/* the permitted maneuvers for this lane */
    struct asnConnectsToExList *connectsTo_ex;  /* optional; set in bit_mask
                                                 * asnconnectsTo_ex_present if
                                                 * present */
		/* connection to downsteam lanes */
    struct asnSpeedLimitList *speedLimits;  /* optional; set in bit_mask
                                             * asnLaneEx_speedLimits_present if
                                             * present */
		/* List all the speed limits */
    struct asnSTPointList *st_points;  /* optional; set in bit_mask
                                        * asnst_points_present if present */
		/* Points list of the center of this lane */
		/* using ST coordinates */
    asnLaneLineType laneLineType;  /* optional; set in bit_mask
                                    * asnlaneLineType_present if present */
} asnLaneEx;

typedef struct asnLaneExList {
    struct asnLaneExList *next;
    asnLaneEx       value;
} *asnLaneExList;

typedef struct asnSignalWaitingLane {
    unsigned char   bit_mask;
#       define      asnallowedPhaseIds_present 0x80
    asnLaneWidth    laneWidth;
    struct asnPointList *points;
    struct asn_seqof2 {
        struct asn_seqof2 *next;
        asnPhaseID      value;
    } *allowedPhaseIds;  /* optional; set in bit_mask asnallowedPhaseIds_present
                          * if present */
		/* e.g. for a typiccal left turn waiting area, both left turn phase and go straight phase are allowed */
} asnSignalWaitingLane;

typedef struct asnConnectingLaneEx {
    unsigned char   bit_mask;
#       define      asnconnectingLaneWidth_present 0x80
#       define      asnconnectingLanePoints_present 0x40
#       define      asnisolatedConnectingLane_present 0x20
    asnSectionId    target_section;
    asnLaneRefID    target_lane;
		/* Index of the connecting lane */
    asnLaneWidth    connectingLaneWidth;  /* optional; set in bit_mask
                                           * asnconnectingLaneWidth_present if
                                           * present */
		/* Indicating the width of the real or virtual connecting lane */
    struct asnPointList *connectingLanePoints;  /* optional; set in bit_mask
                                           * asnconnectingLanePoints_present if
                                           * present */
		/* Indicating the position of the real or virtual connecting lane */
    ossBoolean      isolatedConnectingLane;  /* optional; set in bit_mask
                                         * asnisolatedConnectingLane_present if
                                         * present */
		/* A real isolated connecting lane is seperated from any other lanes */
		/* Usually exists in right turning */
} asnConnectingLaneEx;

typedef struct asnConnectionEx {
    unsigned char   bit_mask;
#       define      asnswl_present 0x80
#       define      asnConnectionEx_connectingLane_present 0x40
#       define      asnConnectionEx_phaseId_present 0x20
#       define      asnConnectionEx_turn_direction_present 0x10
    asnNodeReferenceID remoteIntersection;
		/* This entry indicates the downstream intersection of the link this lane connects to. */
		/* This provides a means to create meshes of lanes */
    asnSignalWaitingLane swl;  /* optional; set in bit_mask asnswl_present if
                                * present */
		/* waiting area for certain signal phase */
		/* usually set for left turn */
    struct asn_seqof3 {
        struct asn_seqof3 *next;
        asnConnectingLaneEx value;
    } *connectingLane;  /* optional; set in bit_mask
                         * asnConnectionEx_connectingLane_present if present */
		/* The index of the connecting lane and also */
		/* the maneuver from the current lane to it */
		/* When we want to list the allowed lanes of the next link */
		/* this lane can lead to, we use this entry */
    asnPhaseID      phaseId;  /* optional; set in bit_mask
                               * asnConnectionEx_phaseId_present if present */
		/* The matching signal group send by */
		/* the SPAT message for this lane/maneuver. */
		/* Shall be present unless the connectingLane */
		/* has no signal group (is un-signalized) */
    asnManeuver     turn_direction;  /* optional; set in bit_mask
                                      * asnConnectionEx_turn_direction_present
                                      * if present */
		/* Indicating the turn direction corresponding to this movement */
} asnConnectionEx;

typedef struct asnConnectsToExList {
    struct asnConnectsToExList *next;
    asnConnectionEx value;
} *asnConnectsToExList;

typedef struct asnST_Point {
    int             s_axis;
		/* Unit 0.1m */
		/* Longitudinal length related to the ref. line */
    short           t_axis;
		/* Unit 0.01m */
		/* Latitudinal distance in st coordinates */
		/* Positive in the left of ref. line */
		/* Negative in the right of ref. line */
} asnST_Point;

typedef struct asnSTPointList {
    struct asnSTPointList *next;
    asnST_Point     value;
} *asnSTPointList;

typedef unsigned short  asnExtMsgID;

union asnAll_PDU_Types_union {
    struct asnMessageFrame *pdu_MessageFrame;  /* asnMessageFrame_PDU */
    struct asnPAMData *pdu_PAMData;  /* asnPAMData_PDU */
    struct asnCLPMM *pdu_CLPMM;  /* asnCLPMM_PDU */
    struct asnPersonalSafetyMessage *pdu_PersonalSafetyMessage;  
                                             /* asnPersonalSafetyMessage_PDU */
    struct asnRoadsideCoordination *pdu_RoadsideCoordination;  
                                              /* asnRoadsideCoordination_PDU */
    struct asnRTCMcorrections *pdu_RTCMcorrections;  
                                                   /* asnRTCMcorrections_PDU */
    struct asnSensorSharingMsg *pdu_SensorSharingMsg;  
                                                  /* asnSensorSharingMsg_PDU */
    struct asnTestMsg *pdu_TestMsg;  /* asnTestMsg_PDU */
    struct asnVehIntentionAndRequest *pdu_VehIntentionAndRequest;  
                                            /* asnVehIntentionAndRequest_PDU */
    struct asnVehiclePaymentMessage *pdu_VehiclePaymentMessage;  
                                             /* asnVehiclePaymentMessage_PDU */
};

enum asnMessageTypes_Type_PDUs {
    asnPDU_MessageTypes_Type_UNKNOWN = 0,

    asnPDU_MessageTypes_Type_TestMsg = asnTestMsg_PDU,
    asnPDU_MessageTypes_Type_RTCMcorrections = asnRTCMcorrections_PDU,
    asnPDU_MessageTypes_Type_PAMData = asnPAMData_PDU,
    asnPDU_MessageTypes_Type_CLPMM = asnCLPMM_PDU,
    asnPDU_MessageTypes_Type_PersonalSafetyMessage = asnPersonalSafetyMessage_PDU,
    asnPDU_MessageTypes_Type_RoadsideCoordination = asnRoadsideCoordination_PDU,
    asnPDU_MessageTypes_Type_SensorSharingMsg = asnSensorSharingMsg_PDU,
    asnPDU_MessageTypes_Type_VehIntentionAndRequest = asnVehIntentionAndRequest_PDU,
    asnPDU_MessageTypes_Type_VehiclePaymentMessage = asnVehiclePaymentMessage_PDU,

    asnPDU_MessageTypes_Type_MAX   = INT_MAX
};

union asnMessageTypes_Type_union {
    struct asnTestMsg *pdu_TestMsg;  /* asnPDU_MessageTypes_Type_TestMsg */
    struct asnRTCMcorrections *pdu_RTCMcorrections;  
                                 /* asnPDU_MessageTypes_Type_RTCMcorrections */
    struct asnPAMData *pdu_PAMData;  /* asnPDU_MessageTypes_Type_PAMData */
    struct asnCLPMM *pdu_CLPMM;  /* asnPDU_MessageTypes_Type_CLPMM */
    struct asnPersonalSafetyMessage *pdu_PersonalSafetyMessage;  
                           /* asnPDU_MessageTypes_Type_PersonalSafetyMessage */
    struct asnRoadsideCoordination *pdu_RoadsideCoordination;  
                            /* asnPDU_MessageTypes_Type_RoadsideCoordination */
    struct asnSensorSharingMsg *pdu_SensorSharingMsg;  
                                /* asnPDU_MessageTypes_Type_SensorSharingMsg */
    struct asnVehIntentionAndRequest *pdu_VehIntentionAndRequest;  
                          /* asnPDU_MessageTypes_Type_VehIntentionAndRequest */
    struct asnVehiclePaymentMessage *pdu_VehiclePaymentMessage;  
                           /* asnPDU_MessageTypes_Type_VehiclePaymentMessage */

    union asnAll_PDU_Types_union other;  /* for known extensions */
};

typedef struct asnMessageTypes_Type {
    enum asnMessageTypes_Type_PDUs pduNum;
    OssBuf          encoded;
    union asnMessageTypes_Type_union decoded;
} asnMessageTypes_Type;

typedef struct asnMessageFrameExt {
    asnExtMsgID     messageId;
    asnMessageTypes_Type value;
} asnMessageFrameExt;

typedef struct asnMESSAGE_ID_AND_TYPE {
    asnExtMsgID     id;
    unsigned short  Type;
} asnMESSAGE_ID_AND_TYPE;

	/* The lower five bits are reserved and shall be set to zero */
	/* Value from B00000000 to B11100000 represents the lowest to the highest level */

	/* value assignments */
typedef struct asnRoadsideSafetyMessage {
    asnMsgCount     msgCnt;
    asn_octet1      id;
		/* RSU ID */
    asnPosition3D   refPos;
		/* Reference position of this RSM message */
    struct asnParticipantList *participants;
		/* All or part of the participants */
		/* detected by RSU */
} asnRoadsideSafetyMessage;

typedef struct asnSPAT {
    unsigned char   bit_mask;
#       define      asnSPAT_moy_present 0x80
#       define      asnSPAT_timeStamp_present 0x40
#       define      asnSPAT_name_present 0x20
    asnMsgCount     msgCnt;
    asnMinuteOfTheYear moy;  /* optional; set in bit_mask asnSPAT_moy_present if
                              * present */
    asnDSecond      timeStamp;  /* optional; set in bit_mask
                                 * asnSPAT_timeStamp_present if present */
		/* Time stamp when this message is formed */
    asnDescriptiveName name;  /* optional; set in bit_mask asnSPAT_name_present
                               * if present */
		/* human readable name for this collection */
		/* to be used only in debug mode */
    struct asnIntersectionStateList *intersections;
		/* sets of SPAT data (one per intersection) */
} asnSPAT;

typedef struct asnRoadSideInformation {
    unsigned char   bit_mask;
#       define      asnRoadSideInformation_moy_present 0x80
#       define      asnRoadSideInformation_rtes_present 0x40
#       define      asnrtss_present 0x20
    asnMsgCount     msgCnt;
    asnMinuteOfTheYear moy;  /* optional; set in bit_mask
                              * asnRoadSideInformation_moy_present if present */
    asn_octet1      id;
		/* RSU ID */
    asnPosition3D   refPos;
		/* Reference position of this RSI message */
    struct asnRTEList *rtes;  /* optional; set in bit_mask
                               * asnRoadSideInformation_rtes_present if
                               * present */
		/* All the rte data packed in this message */
    struct asnRTSList *rtss;  /* optional; set in bit_mask asnrtss_present if
                               * present */
		/* All the rts data packed in this message */
} asnRoadSideInformation;

	/* Main message frame */
typedef struct asnMessageFrame {
    unsigned short  choice;
#       define      asnbsmFrame_chosen 1
#       define      asnmapFrame_chosen 2
#       define      asnrsmFrame_chosen 3
#       define      asnspatFrame_chosen 4
#       define      asnrsiFrame_chosen 5
#       define      asnmsgFrameExt_chosen 6
    union {
		/* Day 1 message frames *//**//**//**//**/
        asnBasicSafetyMessage bsmFrame;  /* to choose, set choice to
                                          * asnbsmFrame_chosen */
        asnMapData      mapFrame;  /* to choose, set choice to
                                    * asnmapFrame_chosen */
        asnRoadsideSafetyMessage rsmFrame;  /* to choose, set choice to
                                             * asnrsmFrame_chosen */
        asnSPAT         spatFrame;  /* to choose, set choice to
                                     * asnspatFrame_chosen */
        asnRoadSideInformation rsiFrame;  /* to choose, set choice to
                                           * asnrsiFrame_chosen */
		/* Day 2 message frames *//**//**//**//**/
        asnMessageFrameExt msgFrameExt;  /* extension #1; to choose, set choice
                                          * to asnmsgFrameExt_chosen */
    } u;
} asnMessageFrame;

typedef enum asnAVPType {
    asnp0 = 0,
		/* Original parking lot */
    asnp1 = 1,
		/* Standard parking lot */
    asnp2 = 2,
		/* Parking lot with special identification */
    asnp3 = 3,
		/* Parking lot with roadside infrastructure */
    asnp4 = 4,
		/* Parking lot with roadside infrastructure and V2X */
    asnp5 = 5
		/* AVP dedicated parking lot */
} asnAVPType;

typedef struct asnParkingLotInfo {
    unsigned char   bit_mask;
#       define      asnParkingLotInfo_id_present 0x80
#       define      asnParkingLotInfo_name_present 0x40
#       define      asnnumber_present 0x20
#       define      asnbuildingLayerNum_present 0x10
#       define      asnavpType_present 0x08
    unsigned short  id;  /* optional; set in bit_mask
                          * asnParkingLotInfo_id_present if present */
		/* Unique id of this parking lot */
		/* if exists */
    asnDescriptiveName name;  /* optional; set in bit_mask
                               * asnParkingLotInfo_name_present if present */
		/* Name of this parking lot */
    unsigned short  number;  /* optional; set in bit_mask asnnumber_present if
                              * present */
		/* Total number of parking slots */
    unsigned short  buildingLayerNum;  /* optional; set in bit_mask
                                        * asnbuildingLayerNum_present if
                                        * present */
		/* Layer number of this parking lot */
    asnAVPType      avpType;  /* optional; set in bit_mask asnavpType_present if
                               * present */
		/* AVP type */
} asnParkingLotInfo;

typedef unsigned short  asnPAMNodeID;

typedef struct asnParkingGuide {
    unsigned char   bit_mask;
#       define      asntargetParkingSlot_present 0x80
    asn_octet1      vehId;
		/* temperary vehicle ID */
    struct asn_seqof4 {
        struct asn_seqof4 *next;
        asnPAMNodeID    value;
    } *drivePath;
		/* the planned path for this vehicle */
		/* represented by a series of PAMNode id */
		/* in order from origin to destination */
    unsigned short  targetParkingSlot;  /* optional; set in bit_mask
                                         * asntargetParkingSlot_present if
                                         * present */
		/* if the vehicle is looking for a parking slot, */
		/* then here is the recommended parking slot id, */
		/* which should be by the last drive road in above drivePath. */
		/* if a targetParkingSlot is not included in a ParkingGuide, */
		/* then probably the vehicle is going to the last PAMNode */
		/* whatever type the PAMNode is. */
} asnParkingGuide;

typedef struct asnPAMData {
    unsigned char   bit_mask;
#       define      asnPAMData_timeStamp_present 0x80
#       define      asnparkingAreaGuidance_present 0x40
    asnMsgCount     msgCnt;
    asnMinuteOfTheYear timeStamp;  /* optional; set in bit_mask
                                    * asnPAMData_timeStamp_present if present */
    asnParkingLotInfo parkingLotInfo;
		/* Basic info of this parking area */
    struct asnPAMNodeList *pamNodes;
		/* intersections or road endpoints in parking area */
    struct asn_seqof5 {
        struct asn_seqof5 *next;
        asnParkingGuide value;
    } *parkingAreaGuidance;  /* optional; set in bit_mask
                              * asnparkingAreaGuidance_present if present */
		/* parking area path guidance for individual vehicles */
		/* are list here. */
} asnPAMData;

	/* The values zero through 255 are allocated for testing purposes */
	/* Note that the value assigned to a node will be */
	/* unique within a parking area */
typedef struct asnPAMNodeAttributes {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} asnPAMNodeAttributes;
#define                     asnentrance 0x80
#define                     asnentrance_byte 0
#define                     asnPAMNodeAttributes_exit 0x40
#define                     asnPAMNodeAttributes_exit_byte 0
#define                     asntoUpstair 0x20
#define                     asntoUpstair_byte 0
#define                     asntoDownstair 0x10
#define                     asntoDownstair_byte 0
#define                     asnetc 0x08
#define                     asnetc_byte 0
#define                     asnmtc 0x04
#define                     asnmtc_byte 0
#define                     asnpassAfterPayment 0x02
#define                     asnpassAfterPayment_byte 0
#define                     asnblocked 0x01
#define                     asnblocked_byte 0

typedef struct asnPAMNode {
    unsigned char   bit_mask;
#       define      asnfloor_present 0x80
#       define      asnattributes_present 0x40
#       define      asninDrives_present 0x20
		/* intersection or road endpoint in parking area */
    asnPAMNodeID    id;
		/* A local unique value set */
    asnPosition3D   refPos;
		/* 3D position of the center of this Node. */
		/* This position is also the reference position for the elements inside */
    short           PAMNode_floor;  /* optional; set in bit_mask
                                     * asnfloor_present if present */
    asnPAMNodeAttributes attributes;  /* optional; set in bit_mask
                                       * asnattributes_present if present */
    struct asnPAMDriveList *inDrives;  /* optional; set in bit_mask
                                        * asninDrives_present if present */
		/* all the links enter this Node */
} asnPAMNode;

typedef struct asnPAMNodeList {
    struct asnPAMNodeList *next;
    asnPAMNode      value;
} *asnPAMNodeList;

typedef struct asnPAMDrive {
    unsigned short  bit_mask;
#       define      asndriveID_present 0x8000
#       define      asntwowaySepration_present 0x4000
#       define      asnspeedLimit_present 0x2000
#       define      asnheightRestriction_present 0x1000
#       define      asndriveWidth_present 0x0800
#       define      asnlaneNum_present 0x0400
#       define      asnPAMDrive_points_present 0x0200
#       define      asnPAMDrive_movements_present 0x0100
#       define      asnparkingSlots_present 0x0080
    asnPAMNodeID    upstreamPAMNodeId;
		/* this drive is from upstreamPAMNode to the PAMNode it belongs to */
    unsigned short  driveID;  /* optional; set in bit_mask asndriveID_present if
                               * present */
		/* local id of this drive with same upsttramPAMNode and PAMNode */
    ossBoolean      twowaySepration;  /* optional; set in bit_mask
                                       * asntwowaySepration_present if
                                       * present */
		/* whether is this drive separated with the opposite direction. */
		/* if not, then the parking slots of the opposite drive */
		/* is also available for vehicles in this drive direction */
    asnSpeed        speedLimit;  /* optional; set in bit_mask
                                  * asnspeedLimit_present if present */
		/* Speed limit */
    unsigned short  heightRestriction;  /* optional; set in bit_mask
                                         * asnheightRestriction_present if
                                         * present */
		/* Height restriction, Unit = 0.1m */
    asnLaneWidth    driveWidth;  /* optional; set in bit_mask
                                  * asndriveWidth_present if present */
		/* Width of this drive */
    unsigned short  laneNum;  /* optional; set in bit_mask asnlaneNum_present if
                               * present */
		/* Number of lanes */
    struct asnPointList *points;  /* optional; set in bit_mask
                                   * asnPAMDrive_points_present if present */
		/* Define road points along the center of this link */
    struct asnPAMMovementList *movements;  /* optional; set in bit_mask
                                            * asnPAMDrive_movements_present if
                                            * present */
		/* Define movements at intersection */
    struct asnParkingSlots *parkingSlots;  /* optional; set in bit_mask
                                            * asnparkingSlots_present if
                                            * present */
		/* Information of parking places of this drive */
} asnPAMDrive;

typedef struct asnPAMDriveList {
    struct asnPAMDriveList *next;
    asnPAMDrive     value;
} *asnPAMDriveList;

typedef struct asnPAMMovementList {
    struct asnPAMMovementList *next;
    asnPAMNodeID    value;
} *asnPAMMovementList;

typedef struct asnParkingSlotPosition {
    asnPositionOffsetLLV topLeft;
    asnPositionOffsetLLV topRight;
    asnPositionOffsetLLV bottomLeft;
		/* A typical parking slot is a rectangle */
		/* with four corners and four edges. */
		/* The top edge is defined as the edge where a parking vehicle enters */
} asnParkingSlotPosition;

typedef struct asnParkingType {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} asnParkingType;
#define                     asnParkingType_unknown 0x80
#define                     asnParkingType_unknown_byte 0
#define                     asnordinary 0x40
#define                     asnordinary_byte 0
#define                     asndisabled 0x20
#define                     asndisabled_byte 0
#define                     asnmini 0x10
#define                     asnmini_byte 0
#define                     asnattached 0x08
#define                     asnattached_byte 0
#define                     asnParkingType_charging 0x04
#define                     asnParkingType_charging_byte 0
#define                     asnstereo 0x02
#define                     asnstereo_byte 0
#define                     asnlady 0x01
#define                     asnlady_byte 0
#define                     asnextended 0x80
#define                     asnextended_byte 1
#define                     asnParkingType_private 0x40
#define                     asnParkingType_private_byte 1

typedef enum asnSlotStatus {
    asnSlotStatus_unknown = 0,
    asnavailable = 1,
    asnoccupied = 2,
    asnSlotStatus_reserved = 3
} asnSlotStatus;

typedef enum asnParkingSpaceTheta {
    asnParkingSpaceTheta_unknown = 0,
    asnvertical = 1,
    asnside = 2,
    asnoblique = 3
} asnParkingSpaceTheta;

typedef enum asnParkingLock {
    asnParkingLock_unknown = 0,
    asnnolock = 1,
    asnlocked = 2,
    asnunlocked = 3
} asnParkingLock;

typedef struct asnParkingSlot {
    unsigned char   bit_mask;
#       define      asnposition_present 0x80
#       define      asnsign_present 0x40
    unsigned short  slotID;
    asnParkingSlotPosition position;  /* optional; set in bit_mask
                                       * asnposition_present if present */
    asnDescriptiveName sign;  /* optional; set in bit_mask asnsign_present if
                               * present */
		/* Parking slot sign like "B101" */
    asnParkingType  parkingType;
    asnSlotStatus   status;
    asnParkingSpaceTheta parkingSpaceTheta;
    asnParkingLock  parkingLock;
} asnParkingSlot;

typedef struct asnParkingSlots {
    struct asnParkingSlots *next;
    asnParkingSlot  value;
} *asnParkingSlots;

typedef enum asnRoleInPlatooning {
    asnleader = 0,
    asnfollower = 1,
    asntail = 2,
    asnfree_vehicle = 3
} asnRoleInPlatooning;

typedef enum asnStatusInPlatooning {
		/* possible states of platooning members */
		/* a complete platooning process can include all or part of them */
    asnnavigating = 0,
    asnbeginToDissmiss = 1,
    asnaskForJoining = 2,
    asnjoining = 3,
    asnfollowing = 4,
    asnaskForLeaving = 5,
    asnleaving = 6
} asnStatusInPlatooning;

typedef struct asnMemberManagement {
    unsigned char   bit_mask;
#       define      asnjoiningList_present 0x80
#       define      asnleavingList_present 0x40
    struct asnMemberList *memberList;
		/* member list of platooning */
    struct asnMemberList *joiningList;  /* optional; set in bit_mask
                                         * asnjoiningList_present if present */
		/* list of vehicle that is allowed to join the platoon */
		/* and is operating the joining procedure */
    struct asnMemberList *leavingList;  /* optional; set in bit_mask
                                         * asnleavingList_present if present */
		/* list of vehicle that is allowed to leaving the platoon */
		/* and is operating the leaving procedure */
    unsigned short  capacity;
		/* the capacity of platooning */
    ossBoolean      openToJoin;
} asnMemberManagement;

typedef struct asnCLPMM {
    unsigned char   bit_mask;
#       define      asnleadingExt_present 0x80
    asnMsgCount     msgCnt;
    asn_octet1      id;
		/* temperary vehicle ID */
    asnDSecond      secMark;
    struct {
        unsigned short  length;
        unsigned char   value[17];
    } pid;
		/* Platooning ID */
    asnRoleInPlatooning role;
		/* vehicle role */
    asnStatusInPlatooning status;
		/* vehicle status */
    asnMemberManagement leadingExt;  /* optional; set in bit_mask
                                      * asnleadingExt_present if present */
		/* Platooning management information */
		/* sent by the leading vehicle */
} asnCLPMM;

typedef struct asnMemberNode {
    asn_octet1      vid;
			/* vehicle ID */
} asnMemberNode;

typedef struct asnMemberList {
    struct asnMemberList *next;
    asnMemberNode   value;
} *asnMemberList;

typedef enum asnPersonalDeviceUserType {
    asnPersonalDeviceUserType_unavailable = 0,
    asnaPEDESTRIAN = 1,
    asnaPEDALCYCLIST = 2,
    asnaROADWORKER = 3,
    asnanANIMAL = 4
} asnPersonalDeviceUserType;

typedef enum asnHumanPropelledType {
    asnHumanPropelledType_unavailable = 0,
    asnHumanPropelledType_otherTypes = 1,
    asnonFoot = 2,
    asnskateboard = 3,
    asnpushOrKickScooter = 4,
    asnHumanPropelledType_wheelchair = 5
} asnHumanPropelledType;

typedef enum asnAnimalPropelledType {
    asnAnimalPropelledType_unavailable = 0,
    asnAnimalPropelledType_otherTypes = 1,
    asnanimalMounted = 2,
    asnanimalDrawnCarriage = 3
} asnAnimalPropelledType;

typedef enum asnMotorizedPropelledType {
    asnMotorizedPropelledType_unavailable = 0,
    asnMotorizedPropelledType_otherTypes = 1,
    asnwheelChair = 2,
    asnbicycle = 3,
    asnscooter = 4,
    asnselfBalancingDevice = 5
} asnMotorizedPropelledType;

typedef struct asnPropelledInformation {
    unsigned short  choice;
#       define      asnhuman_chosen 1
#       define      asnanimal_chosen 2
#       define      asnmotor_chosen 3
    union {
        asnHumanPropelledType human;  /* to choose, set choice to
                                       * asnhuman_chosen */
                                      /* PersonalDeviceUserType would be a aPEDESTRIAN */
        asnAnimalPropelledType animal;  /* to choose, set choice to
                                         * asnanimal_chosen */
        asnMotorizedPropelledType motor;  /* to choose, set choice to
                                           * asnmotor_chosen */
    } u;
} asnPropelledInformation;

typedef enum asnNumberOfParticipantsInCluster {
    asnNumberOfParticipantsInCluster_unavailable = 0,
    asnsmall = 1,
		/* 2-5 */
    asnmedium = 2,
		/* 6-10 */
    asnlarge = 3
		/* >10 */
} asnNumberOfParticipantsInCluster;

typedef enum asnAttachment {
    asnAttachment_unavailable = 0,
    asnstroller = 1,
    asnbicycleTrailer = 2,
    asncart = 3,
    asnAttachment_wheelchair = 4,
    asnotherWalkAssistAttachments = 5,
    asnpet = 6
} asnAttachment;

typedef struct asnPersonalDeviceUsageState {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} asnPersonalDeviceUsageState; /* All bits shall be set to zero when unknown state */
#define                     asnPersonalDeviceUsageState_unavailable 0x80 /* Not specified */
#define                     asnPersonalDeviceUsageState_unavailable_byte 0
#define                     asnother 0x40 /* Used for states not defined below */
#define                     asnother_byte 0
#define                     asnidle 0x20 /* Human is not interacting with device */
#define                     asnidle_byte 0
#define                     asnlisteningToAudio 0x10 /* Any audio source other then calling */
#define                     asnlisteningToAudio_byte 0
#define                     asntyping 0x08 /* Including texting, entering addresses */
#define                     asntyping_byte 0
		/* and other manual input activity */
#define                     asncalling 0x04
#define                     asncalling_byte 0
#define                     asnplayingGames 0x02
#define                     asnplayingGames_byte 0
#define                     asnreading 0x01
#define                     asnreading_byte 0
#define                     asnviewing 0x80 /* Watching dynamic content, including following */
		/* navigation prompts, viewing videos or other */
		/* visual contents that are not static */
#define                     asnviewing_byte 1

typedef struct asnPersonalAssistive {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} asnPersonalAssistive;
#define                     asnPersonalAssistive_unavailable 0x80
#define                     asnPersonalAssistive_unavailable_byte 0
#define                     asnotherType 0x40
#define                     asnotherType_byte 0
#define                     asnvision 0x20
#define                     asnvision_byte 0
#define                     asnhearing 0x10
#define                     asnhearing_byte 0
#define                     asnmovement 0x08
#define                     asnmovement_byte 0
#define                     asncognition 0x04
#define                     asncognition_byte 0

typedef struct asnPersonalExtensions {
    unsigned char   bit_mask;
#       define      asnuseState_present 0x80
#       define      asnassistType_present 0x40
    asnPersonalDeviceUsageState useState;  /* optional; set in bit_mask
                                            * asnuseState_present if present */
    asnPersonalAssistive assistType;  /* optional; set in bit_mask
                                       * asnassistType_present if present */
} asnPersonalExtensions;

typedef enum asnRoadWorkerType {
    asnRoadWorkerType_unavailable = 0,
    asntrafficPolice = 1,
    asnconstructionPersonnel = 2,
    asnpoliceOfficers = 3,
    asntrafficControlPersons = 4,
		/* Road workers with special equipment for directing traffic. */
    asnrailroadCrossingGuards = 5,
		/* Railroad crossing guards who notify motorists of approaching trains */
		/* at locations like private roads or driveways crossing train tracks */
		/* and where automated equipment is disabled or not present. */
    asnemergencyOrganizationPersonnel = 6
		/* Personnel belonging to emergency response organizations such as */
		/* fire departments, hospitals, river rescue, or associated with */
		/* emergency vehicles including ambulances as designated by the */
		/* regional authority (relating to designation of emergency vehicles) */
		/* while performing their duties. */
} asnRoadWorkerType;

typedef struct asnRoadWorkerActivityType {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} asnRoadWorkerActivityType;
#define                     asnRoadWorkerActivityType_unavailable 0x80 /* Not specified */
#define                     asnRoadWorkerActivityType_unavailable_byte 0
#define                     asnworkingOnRoad 0x40 /* Road workers on foot, in or out of */
#define                     asnworkingOnRoad_byte 0
		/* a closure, performing activities like: */
		/* construction, land surveying, */
		/* trash removal, or site inspection. */
#define                     asnsettingUpClosures 0x20 /* Road workers on foot performing */
#define                     asnsettingUpClosures_byte 0
		/* activities like: setting up signs, */
		/* placing cones/barrels/pylons, or placing */
		/* flares. Note: People are in the road */
		/* redirecting traffic, but the closure is */
		/* not complete, so utmost care is required */
		/* to determine the allowed path to take to */
		/* avoid entering the work zone and/or */
		/* harming the workers. */
#define                     asnrespondingToEvents 0x10 /* Public safety or other road workers on */
#define                     asnrespondingToEvents_byte 0
		/* foot performing activities like: treating */
		/* injured people, putting out fires, */
		/* cleaning chemical spills, aiding disabled */
		/* vehicles, criminal investigations, */
		/* or animal control. Note: These events tend */
		/* to be more dynamic than workingOnRoad */
#define                     asndirectingTraffic 0x08 /* Public safety or other road workers on */
#define                     asndirectingTraffic_byte 0
		/* foot directing traffic in situations like: */
		/* a traffic signal out of operation, */
		/* a construction or crash site with a short */
		/* term lane closure, a single lane flagging */
		/* operation, or ingress/egress to a special event. */
#define                     asnotherActivities 0x04 /* Designated by regional authorities */
#define                     asnotherActivities_byte 0

typedef struct asnRoadWorkerExtensions {
    unsigned char   bit_mask;
#       define      asnworkerType_present 0x80
#       define      asnactivityType_present 0x40
    asnRoadWorkerType workerType;  /* optional; set in bit_mask
                                    * asnworkerType_present if present */
    asnRoadWorkerActivityType activityType;  /* optional; set in bit_mask
                                              * asnactivityType_present if
                                              * present */
} asnRoadWorkerExtensions;

typedef enum asnPersonalCrossing {
    asnPersonalCrossing_unavailable = 0,
    asnPersonalCrossing_request = 1,
    asncrossing = 2,
    asnfinish = 3
} asnPersonalCrossing;

typedef struct asnPersonalRequest {
    unsigned char   bit_mask;
#       define      asncrossing_present 0x80
    asnPersonalCrossing crossing;  /* optional; set in bit_mask
                                    * asncrossing_present if present */
} asnPersonalRequest;

typedef struct asnNon_motorData {
    unsigned char   bit_mask;
#       define      asnpropulsion_present 0x80
#       define      asnclusterSize_present 0x40
#       define      asnattachment_present 0x20
#       define      asnpersonalExt_present 0x10
#       define      asnroadWorkerExt_present 0x08
#       define      asnpersonalReq_present 0x04
		/* Type-related Data */
    asnPersonalDeviceUserType basicType;
    asnPropelledInformation propulsion;  /* optional; set in bit_mask
                                          * asnpropulsion_present if present */
    asnNumberOfParticipantsInCluster clusterSize;  /* optional; set in bit_mask
                                                    * asnclusterSize_present if
                                                    * present */
    asnAttachment   attachment;  /* optional; set in bit_mask
                                  * asnattachment_present if present */
    asnPersonalExtensions personalExt;  /* optional; set in bit_mask
                                         * asnpersonalExt_present if present */
    asnRoadWorkerExtensions roadWorkerExt;  /* optional; set in bit_mask
                                             * asnroadWorkerExt_present if
                                             * present */
    asnPersonalRequest personalReq;  /* optional; set in bit_mask
                                      * asnpersonalReq_present if present */
} asnNon_motorData;

typedef struct asnPersonalSafetyMessage {
    unsigned char   bit_mask;
#       define      asnPersonalSafetyMessage_timeConfidence_present 0x80
#       define      asnPersonalSafetyMessage_accelSet_present 0x40
#       define      asnPersonalSafetyMessage_pathHistory_present 0x20
#       define      asnPersonalSafetyMessage_path_Planning_present 0x10
		/* Basic Info */
    asnMsgCount     msgCnt;
    asn_octet1      id;
		/* temperary ID */
    asnDSecond      secMark;
    asnTimeConfidence timeConfidence;  /* optional; set in bit_mask
                           * asnPersonalSafetyMessage_timeConfidence_present if
                           * present */
    asnPosition3D   pos;
    asnPositionalAccuracy posAccuracy;
		/* Accuracy for GNSS system */
    asnSpeed        speed;
    asnHeading      heading;
    asnAccelerationSet4Way accelSet;  /* optional; set in bit_mask
                                 * asnPersonalSafetyMessage_accelSet_present if
                                 * present */
    asnPathHistory  pathHistory;  /* optional; set in bit_mask
                              * asnPersonalSafetyMessage_pathHistory_present if
                              * present */
    struct asnPathPlanning *path_Planning;  /* optional; set in bit_mask
                            * asnPersonalSafetyMessage_path_Planning_present if
                            * present */
    unsigned short  overallRadius;
		/* In units of one decimeter */
		/* Radius considering cluster or attachment */

		/* Type-related Data */
    asnNon_motorData non_motorData;
} asnPersonalSafetyMessage;

typedef struct asnDriveBehavior {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} asnDriveBehavior;
#define                     asngoStraightForward 0x80
#define                     asngoStraightForward_byte 0
#define                     asnlaneChangingToLeft 0x40
#define                     asnlaneChangingToLeft_byte 0
#define                     asnlaneChangingToRight 0x20
#define                     asnlaneChangingToRight_byte 0
#define                     asnrampIn 0x10
#define                     asnrampIn_byte 0
#define                     asnrampOut 0x08
#define                     asnrampOut_byte 0
#define                     asnintersectionStraightThrough 0x04
#define                     asnintersectionStraightThrough_byte 0
#define                     asnintersectionTurnLeft 0x02
#define                     asnintersectionTurnLeft_byte 0
#define                     asnintersectionTurnRight 0x01
#define                     asnintersectionTurnRight_byte 0
#define                     asnintersectionUTurn 0x80
#define                     asnintersectionUTurn_byte 1
#define                     asnstop_and_go 0x40
#define                     asnstop_and_go_byte 1
#define                     asnstop 0x20
#define                     asnstop_byte 1
#define                     asnslow_down 0x10
#define                     asnslow_down_byte 1
#define                     asnspeed_up 0x08
#define                     asnspeed_up_byte 1
#define                     asnDriveBehavior_parking 0x04
#define                     asnDriveBehavior_parking_byte 1

typedef struct asnReferenceLanes {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} asnReferenceLanes;
		/* With bits as defined: */
#define                     asnReferenceLanes_reserved 0x80
#define                     asnReferenceLanes_reserved_byte 0
#define                     asnlane1 0x40
#define                     asnlane1_byte 0
#define                     asnlane2 0x20
#define                     asnlane2_byte 0
#define                     asnlane3 0x10
#define                     asnlane3_byte 0
#define                     asnlane4 0x08
#define                     asnlane4_byte 0
#define                     asnlane5 0x04
#define                     asnlane5_byte 0
#define                     asnlane6 0x02
#define                     asnlane6_byte 0
#define                     asnlane7 0x01
#define                     asnlane7_byte 0
#define                     asnlane8 0x80
#define                     asnlane8_byte 1
#define                     asnlane9 0x40
#define                     asnlane9_byte 1
#define                     asnlane10 0x20
#define                     asnlane10_byte 1
#define                     asnlane11 0x10
#define                     asnlane11_byte 1
#define                     asnlane12 0x08
#define                     asnlane12_byte 1
#define                     asnlane13 0x04
#define                     asnlane13_byte 1
#define                     asnlane14 0x02
#define                     asnlane14_byte 1
#define                     asnlane15 0x01
#define                     asnlane15_byte 1

typedef struct asnReferenceLink {
    unsigned char   bit_mask;
#       define      asnreferenceLanes_present 0x80
		/* this Link is from Node of upstreamNodeId to Node of downstreamNodeId */
    asnNodeReferenceID upstreamNodeId;
    asnNodeReferenceID downstreamNodeId;
    asnReferenceLanes referenceLanes;  /* optional; set in bit_mask
                                        * asnreferenceLanes_present if
                                        * present */
		/* Provide reference lanes if is necessary */
		/* Refer to all lanes if this data is not given */
} asnReferenceLink;

	/* Path point list for RTS message */
typedef unsigned short  asnRadius;

typedef struct asnReferencePath {
    struct asnPathPointList *activePath;
		/* RSI is active for vehicles within this path */
		/* Points are listed from upstream to downstream */
		/* along the vehicle drive direction. */
		/* One path includes at least 1 points. */
		/* A path with only 1 point means a round alert area */
    asnRadius       pathRadius;
		/* The biggest distance away from the alert path */
		/* within which the warning is active. */
} asnReferencePath;

typedef struct asnDriveSuggestion {
    unsigned char   bit_mask;
#       define      asnDriveSuggestion_lifeTime_present 0x80
#       define      asnrelatedLink_present 0x40
#       define      asnDriveSuggestion_relatedPath_present 0x20
    asnDriveBehavior suggestion;
		/* Drive behavior allowed or recommended */
		/* within the time range below */
		/* if matches the related link or path */
    asnTimeOffset   lifeTime;  /* optional; set in bit_mask
                                * asnDriveSuggestion_lifeTime_present if
                                * present */
		/* Lifetime of this suggestion */
		/* Time offset is calculated from secMark of this message */
    asnReferenceLink relatedLink;  /* optional; set in bit_mask
                                    * asnrelatedLink_present if present */
		/* Extra judgement condition for vehicle to decide whether to follow the suggestion or not */
    asnReferencePath relatedPath;  /* optional; set in bit_mask
                                    * asnDriveSuggestion_relatedPath_present if
                                    * present */
		/* Extra judgement condition for vehicle to decide whether to follow the suggestion or not */
} asnDriveSuggestion;

typedef struct asnCoordinationInfo {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} asnCoordinationInfo;
#define                     asncooperativeLaneChanging 0x80
#define                     asncooperativeLaneChanging_byte 0
#define                     asncooperativeVehMerging 0x40
#define                     asncooperativeVehMerging_byte 0
#define                     asnlaneChangingAtIntersection 0x20
#define                     asnlaneChangingAtIntersection_byte 0
#define                     asnno_signalIntersectionPassing 0x10
#define                     asnno_signalIntersectionPassing_byte 0
#define                     asndynamicLaneManagement 0x08
#define                     asndynamicLaneManagement_byte 0
#define                     asnlaneReservation 0x04
#define                     asnlaneReservation_byte 0
#define                     asnlaneRestriction 0x02
#define                     asnlaneRestriction_byte 0
#define                     asnCoordinationInfo_signalPriority 0x01
#define                     asnCoordinationInfo_signalPriority_byte 0

typedef struct asnVehicleCoordination {
    unsigned char   bit_mask;
#       define      asndriveSuggestion_present 0x80
#       define      asnpathGuidance_present 0x40
#       define      asnVehicleCoordination_info_present 0x20
    asn_octet1      vehId;
		/* Temp ID of the target vehicle */
    asnDriveSuggestion driveSuggestion;  /* optional; set in bit_mask
                                          * asndriveSuggestion_present if
                                          * present */
    struct asnPathPlanning *pathGuidance;  /* optional; set in bit_mask
                                            * asnpathGuidance_present if
                                            * present */
		/* Coordination using path guidance */
    asnCoordinationInfo info;  /* optional; set in bit_mask
                                * asnVehicleCoordination_info_present if
                                * present */
		/* Detailed use cases related to current coordination */
} asnVehicleCoordination;

typedef struct asn_octet2 {
    unsigned short  length;
    unsigned char   *value;
} asn_octet2;

typedef struct asnDescription {
    unsigned short  choice;
#       define      asntextString_chosen 1
#       define      asntextGB2312_chosen 2
    union {
        struct asn_char1 {
            unsigned short  length;
            char            *value;
        } textString;  /* to choose, set choice to asntextString_chosen */
		/* ASCII text */
        asn_octet2      textGB2312;  /* to choose, set choice to
                                      * asntextGB2312_chosen */
		/* text using Chinese-character encoding GB2312-80 */
    } u;
} asnDescription;

typedef struct asnLaneCoordination {
    unsigned char   bit_mask;
#       define      asnLaneCoordination_relatedPath_present 0x80
#       define      asnLaneCoordination_tBegin_present 0x40
#       define      asnLaneCoordination_tEnd_present 0x20
#       define      asnrecommendedSpeed_present 0x10
#       define      asnrecommendedBehavior_present 0x08
#       define      asnLaneCoordination_info_present 0x04
#       define      asnLaneCoordination_description_present 0x02
    asnReferenceLink targetLane;
		/* The target link or lane that RSU tries to control */
    asnReferencePath relatedPath;  /* optional; set in bit_mask
                                    * asnLaneCoordination_relatedPath_present if
                                    * present */
		/* reference path if existed to help vehicles to determine */
		/* whether they should follow the coordination or not */
    asnDDateTime    tBegin;  /* optional; set in bit_mask
                              * asnLaneCoordination_tBegin_present if present */
    asnDDateTime    tEnd;  /* optional; set in bit_mask
                            * asnLaneCoordination_tEnd_present if present */
    asnSpeed        recommendedSpeed;  /* optional; set in bit_mask
                                        * asnrecommendedSpeed_present if
                                        * present */
    asnDriveBehavior recommendedBehavior;  /* optional; set in bit_mask
                                            * asnrecommendedBehavior_present if
                                            * present */
    asnCoordinationInfo info;  /* optional; set in bit_mask
                                * asnLaneCoordination_info_present if present */
		/* Detailed use cases related to current coordination */
    asnDescription  description;  /* optional; set in bit_mask
                                   * asnLaneCoordination_description_present if
                                   * present */
		/* Additional description information */
} asnLaneCoordination;

typedef struct asnRoadsideCoordination {
    unsigned char   bit_mask;
#       define      asncoordinates_present 0x80
#       define      asnlaneCoordinates_present 0x40
    asnMsgCount     msgCnt;
    asn_octet1      id;
		/* temperary RSU ID */
    asnDSecond      secMark;
    asnPosition3D   refPos;
		/* Reference position of this RSC message */
    struct asn_seqof6 {
        struct asn_seqof6 *next;
        asnVehicleCoordination value;
    } *coordinates;  /* optional; set in bit_mask asncoordinates_present if
                      * present */
		/* Coordination with single vehicle */
    struct asn_seqof7 {
        struct asn_seqof7 *next;
        asnLaneCoordination value;
    } *laneCoordinates;  /* optional; set in bit_mask asnlaneCoordinates_present
                          * if present */
		/* Lane or link level coordination */
} asnRoadsideCoordination;

typedef unsigned short  asnEventType;

typedef enum asnEventSource {
    asnEventSource_unknown = 0,     /* 0 Unknown */
    asnpolice = 1,      /* 1 traffic police */
    asngovernment = 2,  /* 2 govenment */
    asnmeteorological = 3, /* 3 meteorological department */
    asninternet = 4,    /* 4 internet services */
    asndetection = 5   /* 5 local detection */
} asnEventSource;

	/* Traffic event type according to China GB/T 29100-2012 */
typedef struct asnRSITimeDetails {
    unsigned char   bit_mask;
#       define      asnstartTime_present 0x80
#       define      asnendTime_present 0x40
#       define      asnendTimeConfidence_present 0x20
    asnMinuteOfTheYear startTime;  /* optional; set in bit_mask
                                    * asnstartTime_present if present */
    asnMinuteOfTheYear endTime;  /* optional; set in bit_mask asnendTime_present
                                  * if present */
		/* Exact or estimated end time */
    asnTimeConfidence endTimeConfidence;  /* optional; set in bit_mask
                                           * asnendTimeConfidence_present if
                                           * present */
} asnRSITimeDetails;

	/* Define radius */
	/* Unit is 0.1m */
typedef struct asnRSIPriority {
    unsigned short  length;
    unsigned char   value[1];
} asnRSIPriority;

	/* Road Traffic Event List */
typedef struct asnRTEData {
    unsigned char   bit_mask;
#       define      asneventPos_present 0x80
#       define      asneventRadius_present 0x40
#       define      asnRTEData_description_present 0x20
#       define      asnRTEData_timeDetails_present 0x10
#       define      asnRTEData_priority_present 0x08
#       define      asnRTEData_referencePaths_present 0x04
#       define      asnRTEData_referenceLinks_present 0x02
#       define      asneventConfidence_present 0x01
    unsigned short  rteId;
		/* local ID of this rte information set by RSU */
    asnEventType    eventType;
		/* Type of event, according to China GB/T 29100-2012 */
    asnEventSource  eventSource;
    asnPositionOffsetLLV eventPos;  /* optional; set in bit_mask
                                     * asneventPos_present if present */
		/* Position of this event, if exists */
    asnRadius       eventRadius;  /* optional; set in bit_mask
                                   * asneventRadius_present if present */
		/* Radius of this event, if exists */
    asnDescription  description;  /* optional; set in bit_mask
                                   * asnRTEData_description_present if
                                   * present */
		/* Additional description to this event */
    asnRSITimeDetails timeDetails;  /* optional; set in bit_mask
                                     * asnRTEData_timeDetails_present if
                                     * present */
		/* Start time or end time when this event is active */
    asnRSIPriority  priority;  /* optional; set in bit_mask
                                * asnRTEData_priority_present if present */
		/* the urgency of this RSI data, a relative */
		/* degree of merit compared with other RSI data */
    struct asnReferencePathList *referencePaths;  /* optional; set in bit_mask
                                         * asnRTEData_referencePaths_present if
                                         * present */
		/* Related paths of this traffic event */
    struct asnReferenceLinkList *referenceLinks;  /* optional; set in bit_mask
                                         * asnRTEData_referenceLinks_present if
                                         * present */
		/* Related links of this traffic event */
    asnConfidence   eventConfidence;  /* optional; set in bit_mask
                                       * asneventConfidence_present if
                                       * present */
		/* indicate the event confidence set by event source */
		/* the probability/confidence of the detected event */
		/* being truly extent at a certain place, */
		/* to help vehicle determine whether to trust the received information. */
} asnRTEData;

	/* Define Road Traffic Event *//**//**//**//**//**//**//**//**/
typedef struct asnRTEList {
    struct asnRTEList *next;
    asnRTEData      value;
} *asnRTEList;

typedef struct asnReferencePathList {
    struct asnReferencePathList *next;
    asnReferencePath value;
} *asnReferencePathList;

	/* Set bit to 1 if the related lane is effective */
	/* Support maximum 15 lanes */
typedef unsigned short  asnSignType;

typedef struct asnAuxiliarySignVehicleType {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} asnAuxiliarySignVehicleType;
#define                     asnrestrictedFromBus 0x80
#define                     asnrestrictedFromBus_byte 0
		/* 除公共汽车以外 */
#define                     asnAuxiliarySignVehicleType_vehicle 0x40
#define                     asnAuxiliarySignVehicleType_vehicle_byte 0
		/* 机动车 */
#define                     asnAuxiliarySignVehicleType_truck 0x20
#define                     asnAuxiliarySignVehicleType_truck_byte 0
		/* 货车 */
#define                     asntractor 0x10
#define                     asntractor_byte 0
		/* 拖拉机 */
#define                     asnAuxiliarySignVehicleType_private 0x08
		/* 私人专属 */
#define                     asnAuxiliarySignVehicleType_private_byte 0

typedef enum asnAuxiliarySignDirection {
    asnstraight = 0,
    asnleftAndRight = 1,
    asnright = 2,
    asnleft = 3,
    asnleftFrontTurn = 4,
    asnrightFronTurn = 5,
    asnrightRearTurn = 6,
    asnleftRearTurn = 7
} asnAuxiliarySignDirection;

typedef struct asnAuxiliarySign {
    unsigned char   bit_mask;
#       define      asnsignWithVehicleType_present 0x80
#       define      asnsignDirection_present 0x40
    asnAuxiliarySignVehicleType signWithVehicleType;  /* optional; set in
                                   * bit_mask asnsignWithVehicleType_present if
                                   * present */
		/* 补充说明某些标志规定车辆的种类、属性，可用于表示一种或两种车辆禁止向某方向行驶的场景中 */
    asnAuxiliarySignDirection signDirection;  /* optional; set in bit_mask
                                               * asnsignDirection_present if
                                               * present */
		/* 补充说明禁令或标志规定的方向 */
} asnAuxiliarySign;

typedef struct asnRTSData {
    unsigned char   bit_mask;
#       define      asnsignPos_present 0x80
#       define      asnRTSData_description_present 0x40
#       define      asnRTSData_timeDetails_present 0x20
#       define      asnRTSData_priority_present 0x10
#       define      asnRTSData_referencePaths_present 0x08
#       define      asnRTSData_referenceLinks_present 0x04
#       define      asnauxiliarySign_present 0x02
    unsigned short  rtsId;
		/* local ID of this rts information set by RSU */
    asnSignType     signType;
		/* Type of sign, according to China GB 5768.2 */
    asnPositionOffsetLLV signPos;  /* optional; set in bit_mask
                                    * asnsignPos_present if present */
		/* Position of the traffic sign, if exists */
    asnDescription  description;  /* optional; set in bit_mask
                                   * asnRTSData_description_present if
                                   * present */
		/* Additional description to the sign */
    asnRSITimeDetails timeDetails;  /* optional; set in bit_mask
                                     * asnRTSData_timeDetails_present if
                                     * present */
		/* start time or end time when this sign is active, if existed */
    asnRSIPriority  priority;  /* optional; set in bit_mask
                                * asnRTSData_priority_present if present */
		/* the urgency of this RSI data, a relative */
		/* degree of merit compared with other RSI data */
    struct asnReferencePathList *referencePaths;  /* optional; set in bit_mask
                                         * asnRTSData_referencePaths_present if
                                         * present */
		/* Related paths of this traffic sign */
    struct asnReferenceLinkList *referenceLinks;  /* optional; set in bit_mask
                                         * asnRTSData_referenceLinks_present if
                                         * present */
		/* Related links of this traffic sign */
		/* DAY II Extension */
    asnAuxiliarySign auxiliarySign;  /* extension #1; optional; set in bit_mask
                                      * asnauxiliarySign_present if present */
		/* Refer to GB5768.2-2009 Chpt.9.2 */
		/* Auxiliary sign */
} asnRTSData;

	/* Define Road Traffic Sign *//**//**//**//**//**//**//**//**/
typedef struct asnRTSList {
    struct asnRTSList *next;
    asnRTSData      value;
} *asnRTSList;

typedef struct asnReferenceLinkList {
    struct asnReferenceLinkList *next;
    asnReferenceLink value;
} *asnReferenceLinkList;

	/* Traffic sign type according to China GB 5768.2 */
	/* Text message warning = 0 */
	/* Danger = 37 */
	/* Rockfall = 15 */
	/* SharpTurn = 2 */
	/* UnderConstruction = 38 */
	/* Slippy = 17 */
	/* Tunnel = 21 */
typedef struct asnPathPointList {
    struct asnPathPointList *next;
    asnPositionOffsetLLV value;
} *asnPathPointList;

typedef enum asnParticipantType {
    asnParticipantType_unknown = 0, /* Unknown */
    asnmotor = 1, /* motor */
    asnnon_motor = 2, /* non-motor */
    asnParticipantType_pedestrian = 3, /* pedestrian */
    asnParticipantType_rsu = 4 /* rsu */
} asnParticipantType;

typedef enum asnSourceType {
    asnSourceType_unknown = 0,
    asnselfinfo = 1,
    asnv2x = 2,
    asnvideo = 3,
    asnmicrowaveRadar = 4,
    asnloop = 5,
    asnlidar = 6,
    asnintegrated = 7
} asnSourceType;

typedef struct asnParticipantData {
    unsigned char   bit_mask;
#       define      asnParticipantData_id_present 0x80
#       define      asnParticipantData_transmission_present 0x40
#       define      asnParticipantData_angle_present 0x20
#       define      asnParticipantData_motionCfd_present 0x10
#       define      asnParticipantData_accelSet_present 0x08
#       define      asnvehicleClass_present 0x04
    asnParticipantType ptcType;
    unsigned short  ptcId;
		/* temporary ID set by RSU */
		/* 0 is RSU itself */
		/* 1..255 represent participants detected by RSU */
		/* ptcId of different participant needs to be unique in RSU */
    asnSourceType   source;
    asn_octet1      id;  /* optional; set in bit_mask
                          * asnParticipantData_id_present if present */
		/* temperary vehicle ID from BSM */
    asnDSecond      secMark;
    asnPositionOffsetLLV pos;
    asnPositionConfidenceSet posConfidence;
    asnTransmissionState transmission;  /* optional; set in bit_mask
                                   * asnParticipantData_transmission_present if
                                   * present */
    asnSpeed        speed;
    asnHeading      heading;
    asnSteeringWheelAngle angle;  /* optional; set in bit_mask
                                   * asnParticipantData_angle_present if
                                   * present */
    asnMotionConfidenceSet motionCfd;  /* optional; set in bit_mask
                                        * asnParticipantData_motionCfd_present
                                        * if present */
    asnAccelerationSet4Way accelSet;  /* optional; set in bit_mask
                                       * asnParticipantData_accelSet_present if
                                       * present */
    asnVehicleSize  size;
		/* Size of participant including motor/non-motor/pedestrian/rsu */
		/* is represented by DE_VehilceSize */
    asnVehicleClassification vehicleClass;  /* optional; set in bit_mask
                                             * asnvehicleClass_present if
                                             * present */
} asnParticipantData;

typedef struct asnParticipantList {
    struct asnParticipantList *next;
    asnParticipantData value;
} *asnParticipantList;

typedef enum asnRTCM_Revision {
    asnRTCM_Revision_unknown = 0,
    asnRTCM_Revision_reserved = 1,
    asnrtcmCMR = 2,
    asnrtcmCMR_Plus = 3,
    asnrtcmSAPOS = 4,
    asnrtcmSAPOS_Adv = 5,
    asnrtcmRTCA = 6,
    asnrtcmRAW = 7,
    asnrtcmRINEX = 8,
    asnrtcmSP3 = 9,
    asnrtcmBINEX = 10,
    asnrtcmRev2_x = 19, /* Used when specific rev is not known */
    asnrtcmRev2_0 = 20,
    asnrtcmRev2_1 = 21,
    asnrtcmRev2_3 = 23, /* Std 10402.3 */
    asnrtcmRev3_0 = 30,
    asnrtcmRev3_1 = 31, /* Std 10403.1 */
    asnrtcmRev3_2 = 32
} asnRTCM_Revision;

typedef unsigned short  asnRTCM_ID;

typedef struct asnRTCM_Payload {
    unsigned short  length;
    unsigned char   *value;
} asnRTCM_Payload;

typedef struct asnRTCMmsg {
    unsigned char   bit_mask;
#       define      asnrev_present 0x80
#       define      asnrtcmID_present 0x40
    asnRTCM_Revision rev;  /* optional; set in bit_mask asnrev_present if
                            * present */
		/* the message and sub-message type, as */
		/* defined in the RTCM revision being used */
    asnRTCM_ID      rtcmID;  /* optional; set in bit_mask asnrtcmID_present if
                              * present */
		/*RTCM version number */
    asnRTCM_Payload payload;
		/* the payload bytes */
} asnRTCMmsg;

typedef struct asnRTCMcorrections {
    asnMsgCount     msgCnt;
    struct asn_seqof8 {
        struct asn_seqof8 *next;
        asnRTCMmsg      value;
    } *corrections;
} asnRTCMcorrections;

typedef enum asnEquipmentType {
    asnEquipmentType_unknown = 0,
    asnEquipmentType_rsu = 1,
    asnEquipmentType_obu = 2,
    asnvru = 3
} asnEquipmentType;

typedef struct asnSensorSharingMsg {
    unsigned char   bit_mask;
#       define      asndetectedRegion_present 0x80
#       define      asnparticipants_present 0x40
#       define      asnobstacles_present 0x20
#       define      asnSensorSharingMsg_rtes_present 0x10
    asnMsgCount     msgCnt;
    asn_octet1      id;
		/* temperary vehicle ID / RSU ID */
		/* who provides the sensor sharing info. */
    asnEquipmentType equipmentType;
		/* Type of the sender */
    asnDSecond      secMark;
    asnPosition3D   sensorPos;
		/* Position of the RSU or OBU that sends this message */
		/* Used as the reference position within this VSS message */
    struct asnDetectedRegion *detectedRegion;  /* optional; set in bit_mask
                                                * asndetectedRegion_present if
                                                * present */
		/* detection area description */
		/*自动驾驶车辆结合目标物的输出做不同的安全策略 */
    struct asnDetectedPTCList *participants;  /* optional; set in bit_mask
                                               * asnparticipants_present if
                                               * present */
		/* All or part of the traffic participants */
    struct asnDetectedObstacleList *obstacles;  /* optional; set in bit_mask
                                                 * asnobstacles_present if
                                                 * present */
		/* All or part of Obstacles */
    struct asnRTEList *rtes;  /* optional; set in bit_mask
                               * asnSensorSharingMsg_rtes_present if present */
		/* All the rte data packed in this message */
} asnSensorSharingMsg;

typedef struct asnDetectedRegion {
    struct asnDetectedRegion *next;
    struct asnPolygon *value;
} *asnDetectedRegion;

typedef enum asnSizeValueConfidence {
    asnSizeValueConfidence_unavailable = 0,
    asnsize_100_00 = 1, /* (100 m) */
    asnsize_050_00 = 2, /* (50 m) */
    asnsize_020_00 = 3, /* (20 m) */
    asnsize_010_00 = 4, /* (10 m) */
    asnsize_005_00 = 5, /* (5 m) */
    asnsize_002_00 = 6, /* (2 m) */
    asnsize_001_00 = 7, /* (1 m) */
    asnsize_000_50 = 8, /* (50 cm) */
    asnsize_000_20 = 9, /* (20 cm) */
    asnsize_000_10 = 10, /* (10 cm) */
    asnsize_000_05 = 11, /* (5 cm) */
    asnsize_000_02 = 12, /* (2 cm) */
    asnsize_000_01 = 13 /* (1 cm) */
} asnSizeValueConfidence;

	/* LSB units are 10 cm with a range of >100 meters */
typedef struct asnObjectSizeConfidence {
    unsigned char   bit_mask;
#       define      asnheightConf_present 0x80
    asnSizeValueConfidence widthConf;
    asnSizeValueConfidence lengthConf;
    asnSizeValueConfidence heightConf;  /* optional; set in bit_mask
                                         * asnheightConf_present if present */
} asnObjectSizeConfidence;

typedef enum asnDetectedPTCType {
    asnDetectedPTCType_unknown = 0,
		/* 未知障碍物 */
    asnunknown_movable = 1,
		/* 未知可移动障碍物 */
    asnunknown_unmovable = 2,
		/* 未知不可移动障碍物 */
    asncar = 3,
		/* 轿车 */
    asnvan = 4,
		/*面包车 */
    asnDetectedPTCType_truck = 5,
		/*卡车 */
    asnbus = 6,
		/*大巴 */
    asncyclist = 7,
		/*自行车 */
    asnmotorcyclist = 8,
		/*摩托车 */
    asntricyclist = 9,
		/*三轮车 */
    asnDetectedPTCType_pedestrian = 10
		/*行人 */
		/*可能会再扩展 */
} asnDetectedPTCType;

typedef enum asnAccConfidence {
    asnAccConfidence_unavailable = 0, /* Not Equipped or unavailable */
    asnAccConfidence_prec100deg = 1, /* 100 m/s2 */
    asnAccConfidence_prec10deg = 2, /* 10 m/s2 */
    asnAccConfidence_prec5deg = 3, /* 5 m/s2 */
    asnAccConfidence_prec1deg = 4, /* 1 m/s2 */
    asnAccConfidence_prec0_1deg = 5, /* 0.1 m/s2 */
    asnAccConfidence_prec0_05deg = 6, /* 0.05 m/s2 */
    asnAccConfidence_prec0_01deg = 7 /* 0.01m/s2 */
} asnAccConfidence;/* Encoded as a 3 bit value */

typedef enum asnAngularVConfidence {
    asnAngularVConfidence_unavailable = 0, /* Not Equipped or unavailable */
    asnAngularVConfidence_prec100deg = 1, /* 100 degree / sec */
    asnAngularVConfidence_prec10deg = 2, /* 10 degree / sec */
    asnAngularVConfidence_prec5deg = 3, /* 5 degree / sec */
    asnAngularVConfidence_prec1deg = 4, /* 1 degree / sec */
    asnAngularVConfidence_prec0_1deg = 5, /* 0.1 degree / sec */
    asnAngularVConfidence_prec0_05deg = 6, /* 0.05 degree / sec */
    asnAngularVConfidence_prec0_01deg = 7 /* 0.01 degree / sec */
} asnAngularVConfidence;/* Encoded as a 3 bit value */

	/* Unit 0.1s */
typedef struct asnAccSet4WayConfidence {
    asnAccConfidence lonAccConfidence;
    asnAccConfidence latAccConfidence;
    asnAccConfidence vertAccConfidence;
    asnAngularVConfidence yawRateCon;
} asnAccSet4WayConfidence;

typedef short           asnPitch;

	/* LSB units of 0.0125 degrees (signed) */
	/* range of -90 to 90 degrees */
typedef short           asnRoll;

	/* LSB units of 0.0125 degrees (signed) */
	/* range of -90 to 90 degrees */
typedef short           asnYaw;

typedef struct asnAttitude {
    asnPitch        pitch;
    asnRoll         roll;
    asnYaw          yaw;
} asnAttitude;

   	/* LSB units of 0.0125 degrees (signed) */
    /* range of -180 to 180 degrees */
typedef struct asnAttitudeConfidence {
    asnHeadingConfidence pitchConfidence;
    asnHeadingConfidence rollRateConfidence;
    asnHeadingConfidence yawRate;
} asnAttitudeConfidence;

typedef short           asnPitchRate;

	/* LSB units of 0.01 degrees per second(signed) */
typedef short           asnRollRate;

typedef struct asnAngularVelocity {
    asnPitchRate    pitchRate;
    asnRollRate     rollRate;
    asnYawRate      yawRate;
} asnAngularVelocity;

	/* LSB units of 0.01 degrees per second(signed) */
typedef struct asnAngularVelocityConfidence {
    asnAngularVConfidence pitchRate;
    asnAngularVConfidence rollRate;
    asnAngularVConfidence yawRate;
} asnAngularVelocityConfidence;

typedef struct asnMotorDataExtension {
    unsigned char   bit_mask;
#       define      asnMotorDataExtension_lights_present 0x80
#       define      asnvehAttitude_present 0x40
#       define      asnvehAttitudeConfidence_present 0x20
#       define      asnvehAngVel_present 0x10
#       define      asnvehAngVelConfidence_present 0x08
    asnExteriorLights lights;  /* optional; set in bit_mask
                                * asnMotorDataExtension_lights_present if
                                * present */
    asnAttitude     vehAttitude;  /* optional; set in bit_mask
                                   * asnvehAttitude_present if present */
    asnAttitudeConfidence vehAttitudeConfidence;  /* optional; set in bit_mask
                                          * asnvehAttitudeConfidence_present if
                                          * present */
    asnAngularVelocity vehAngVel;  /* optional; set in bit_mask
                                    * asnvehAngVel_present if present */
    asnAngularVelocityConfidence vehAngVelConfidence;  /* optional; set in
                                   * bit_mask asnvehAngVelConfidence_present if
                                   * present */
} asnMotorDataExtension;

typedef struct asnNon_motorDataExtension {
    unsigned short  overallRadius;
		/* In units of one decimeter */
		/* Radius considering cluster or attachment */

		/* Type-related Data */
    asnNon_motorData non_motorData;
} asnNon_motorDataExtension;

	/* 一个大路口的目标物可以达到300到500 */
	/* 实际使用时，需要考虑底层空口资源能力 */
typedef struct asnDetectedPTCData {
    unsigned short  bit_mask;
#       define      asnDetectedPTCData_objSizeConfidence_present 0x8000
#       define      asndetectedPTCType_present 0x4000
#       define      asntypeConfidence_present 0x2000
#       define      asnDetectedPTCData_acc4WayConfidence_present 0x1000
#       define      asnstatusDuration_present 0x0800
#       define      asnDetectedPTCData_pathHistory_present 0x0400
#       define      asnplanningList_present 0x0200
#       define      asnDetectedPTCData_tracking_present 0x0100
#       define      asnDetectedPTCData_polygon_present 0x0080
#       define      asntype_relatedExt_present 0x0040
    asnParticipantData ptc;
		/* Basic information of traffic participant */
    asnObjectSizeConfidence objSizeConfidence;  /* optional; set in bit_mask
                              * asnDetectedPTCData_objSizeConfidence_present if
                              * present */
		/*大小置信度 */
    asnDetectedPTCType detectedPTCType;  /* optional; set in bit_mask
                                          * asndetectedPTCType_present if
                                          * present */
		/* DayI中ParticipantType类型很少，考虑是扩展原有的还是将ParticipantType作为一级分类，新增字段作为二级分类 */
    asnConfidence   typeConfidence;  /* optional; set in bit_mask
                                      * asntypeConfidence_present if present */
		/* 类型置信度 */
    asnAccSet4WayConfidence acc4WayConfidence;  /* optional; set in bit_mask
                              * asnDetectedPTCData_acc4WayConfidence_present if
                              * present */
		/*四轴加速度置信度 */
    asnTimeOffset   statusDuration;  /* optional; set in bit_mask
                                      * asnstatusDuration_present if present */
        /* Time length for which ptc keeps the same situation */
        /* Mainly used for stationary vehicle */
    asnPathHistory  pathHistory;  /* optional; set in bit_mask
                                   * asnDetectedPTCData_pathHistory_present if
                                   * present */
    struct asnPlanningList *planningList;  /* optional; set in bit_mask
                                            * asnplanningList_present if
                                            * present */
        /* 路侧对被感知对象的预测可以比车端做得更优，协同预测 */
    unsigned short  tracking;  /* optional; set in bit_mask
                                * asnDetectedPTCData_tracking_present if
                                * present */
		/* tracking time of this obstacle */
		/* in seconds */
    struct asnPolygon *polygon;  /* optional; set in bit_mask
                                  * asnDetectedPTCData_polygon_present if
                                  * present */
        /* 3D vertex list */
    struct {
        unsigned short  choice;
#           define      asnmotorExt_chosen 1
#           define      asnnon_motorExt_chosen 2
        union {
            asnMotorDataExtension motorExt;  /* to choose, set choice to
                                              * asnmotorExt_chosen */
			/* Data Extension for vehicle */
            asnNon_motorDataExtension non_motorExt;  /* to choose, set choice to
                                                    * asnnon_motorExt_chosen */
	        /* Data Extension for vehicle */
        } u;
    } type_relatedExt;  /* optional; set in bit_mask asntype_relatedExt_present
                         * if present */
} asnDetectedPTCData;

typedef struct asnDetectedPTCList {
    struct asnDetectedPTCList *next;
    asnDetectedPTCData value;
} *asnDetectedPTCList;

typedef unsigned short  asnPlanningDuration;

typedef struct asnPlanning {
    unsigned char   bit_mask;
#       define      asnduration_present 0x80
#       define      asnplanConfidence_present 0x40
#       define      asndrivingBehavior_present 0x20
#       define      asnpathPlanning_present 0x10
    asnPlanningDuration duration;  /* optional; set in bit_mask
                                    * asnduration_present if present */
		/* time duration for this plan */
    asnConfidence   planConfidence;  /* optional; set in bit_mask
                                      * asnplanConfidence_present if present */
    asnDriveBehavior drivingBehavior;  /* optional; set in bit_mask
                                        * asndrivingBehavior_present if
                                        * present */
    struct asnPathPlanning *pathPlanning;  /* optional; set in bit_mask
                                            * asnpathPlanning_present if
                                            * present */
} asnPlanning;

typedef struct asnPlanningList {
    struct asnPlanningList *next;
    asnPlanning     value;
} *asnPlanningList;

typedef struct asnPolygon {
    struct asnPolygon *next;
    asnPositionOffsetLLV value;
} *asnPolygon;

typedef enum asnObstacleType {
    asnObstacleType_unknown = 0,
    asnrockfall = 1,
    asnlandslide = 2,
    asnanimal_intrusion = 3,
    asnliquid_spill = 4,
    asngoods_scattered = 5,
    asntrafficcone = 6,
		/* 锥筒 */
    asnsafety_triangle = 7,
	    /* 三角牌 */
    asntraffic_roadblock = 8,
    asninspection_shaft_without_cover = 9,
    asnunknown_fragments = 10,
    asnunknown_hard_object = 11,
    asnunknown_soft_object = 12
} asnObstacleType;

typedef unsigned short  asnSizeValue;

typedef struct asnObjectSize {
    unsigned char   bit_mask;
#       define      asnObjectSize_height_present 0x80
    asnSizeValue    width;
    asnSizeValue    length;
    asnSizeValue    height;  /* optional; set in bit_mask
                              * asnObjectSize_height_present if present */
} asnObjectSize;

typedef struct asnDetectedObstacleData {
    unsigned short  bit_mask;
#       define      asnobjTypeConfidence_present 0x8000
#       define      asnDetectedObstacleData_speedCfd_present 0x4000
#       define      asnDetectedObstacleData_headingCfd_present 0x2000
#       define      asnverSpeed_present 0x1000
#       define      asnverSpeedConfidence_present 0x0800
#       define      asnDetectedObstacleData_accelSet_present 0x0400
#       define      asnDetectedObstacleData_objSizeConfidence_present 0x0200
#       define      asnDetectedObstacleData_tracking_present 0x0100
#       define      asnDetectedObstacleData_polygon_present 0x0080
    asnObstacleType obsType;
    asnConfidence   objTypeConfidence;  /* optional; set in bit_mask
                                         * asnobjTypeConfidence_present if
                                         * present */
    unsigned short  obsId;
		/* temporary ID set by the message sender */
		/* 0 is reserved */
		/* 1..255 represent different detected obstacles */
		/* obsId of different participant needs to be unique locally */
    asnSourceType   source;
    asnDSecond      secMark;
    asnPositionOffsetLLV pos;
    asnPositionConfidenceSet posConfidence;
    asnSpeed        speed;
    asnSpeedConfidence speedCfd;  /* optional; set in bit_mask
                                   * asnDetectedObstacleData_speedCfd_present if
                                   * present */
    asnHeading      heading;
    asnHeadingConfidence headingCfd;  /* optional; set in bit_mask
                                * asnDetectedObstacleData_headingCfd_present if
                                * present */
    asnSpeed        verSpeed;  /* optional; set in bit_mask asnverSpeed_present
                                * if present */
    asnSpeedConfidence verSpeedConfidence;  /* optional; set in bit_mask
                                             * asnverSpeedConfidence_present if
                                             * present */
    asnAccelerationSet4Way accelSet;  /* optional; set in bit_mask
                                  * asnDetectedObstacleData_accelSet_present if
                                  * present */
    asnObjectSize   size;
    asnObjectSizeConfidence objSizeConfidence;  /* optional; set in bit_mask
                         * asnDetectedObstacleData_objSizeConfidence_present if
                         * present */
    unsigned short  tracking;  /* optional; set in bit_mask
                                * asnDetectedObstacleData_tracking_present if
                                * present */
		/* tracking time of this obstacle */
		/* in seconds */
    struct asnPolygon *polygon;  /* optional; set in bit_mask
                                  * asnDetectedObstacleData_polygon_present if
                                  * present */
		/* 3D vertex list */
} asnDetectedObstacleData;

typedef struct asnDetectedObstacleList {
    struct asnDetectedObstacleList *next;
    asnDetectedObstacleData value;
} *asnDetectedObstacleList;

typedef struct asnIntersectionStatusObject {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} asnIntersectionStatusObject;
#define                     asnmanualControlIsEnabled 0x80
#define                     asnmanualControlIsEnabled_byte 0
		/* Timing reported is per programmed values, etc. but person */
		/* at cabinet can manually request that certain intervals are */
		/* terminated early (e.g. green). */
#define                     asnstopTimeIsActivated 0x40
#define                     asnstopTimeIsActivated_byte 0
		/* And all counting/timing has stopped. */
#define                     asnfailureFlash 0x20
#define                     asnfailureFlash_byte 0
		/* Above to be used for any detected hardware failures, */
		/* e.g. conflict monitor as well as for police flash */
#define                     asnpreemptIsActive 0x10
#define                     asnpreemptIsActive_byte 0
#define                     asnsignalPriorityIsActive 0x08
#define                     asnsignalPriorityIsActive_byte 0
		/* Additional states */
#define                     asnfixedTimeOperation 0x04
#define                     asnfixedTimeOperation_byte 0
		/* Schedule of signals is based on time only */
		/* (i.e. the state can be calculated) */
#define                     asntrafficDependentOperation 0x02
#define                     asntrafficDependentOperation_byte 0
		/* Operation is based on different levels of traffic parameters */
		/* (requests, duration of gaps or more complex parameters) */
#define                     asnstandbyOperation 0x01
#define                     asnstandbyOperation_byte 0
		/* Controller: partially switched off or partially amber flashing */
#define                     asnfailureMode 0x80
#define                     asnfailureMode_byte 1
		/* Controller has a problem or failure in operation */
#define                     asnIntersectionStatusObject_off 0x40
#define                     asnIntersectionStatusObject_off_byte 1
		/* Controller is switched off */
		/* Related to MAP and SPAT bindings */
#define                     asnrecentMAPmessageUpdate 0x20
#define                     asnrecentMAPmessageUpdate_byte 1
		/* Map revision with content changes */
#define                     asnrecentChangeInMAPassignedLanesIDsUsed 0x10
#define                     asnrecentChangeInMAPassignedLanesIDsUsed_byte 1
		/* Change in MAP's assigned lanes used (lane changes) */
		/* Changes in the active lane list description */
#define                     asnnoValidMAPisAvailableAtThisTime 0x08
#define                     asnnoValidMAPisAvailableAtThisTime_byte 1
		/* MAP (and various lanes indexes) not available */
#define                     asnnoValidSPATisAvailableAtThisTime 0x04
		/* SPAT system is not working at this time */
		/* Bits 14,15 reserved at this time and shall be zero */
#define                     asnnoValidSPATisAvailableAtThisTime_byte 1

typedef struct asnIntersectionState {
    unsigned char   bit_mask;
#       define      asnIntersectionState_moy_present 0x80
#       define      asnIntersectionState_timeStamp_present 0x40
#       define      asnIntersectionState_timeConfidence_present 0x20
    asnNodeReferenceID intersectionId;
		/* A globally unique value set, consisting of a */
		/* regionID and intersection ID assignment */
		/* provides a unique mapping to the MAP Node */
    asnIntersectionStatusObject status;
		/* general status of the controller(s) */
    asnMinuteOfTheYear moy;  /* optional; set in bit_mask
                              * asnIntersectionState_moy_present if present */
		/* Minute of current UTC year */
		/* used only with messages to be archived */
    asnDSecond      timeStamp;  /* optional; set in bit_mask
                                 * asnIntersectionState_timeStamp_present if
                                 * present */
		/* the mSec point in the current UTC minute that */
		/* this message was constructed */
    asnTimeConfidence timeConfidence;  /* optional; set in bit_mask
                               * asnIntersectionState_timeConfidence_present if
                               * present */
		/* indicate the time confidence of the above UTC time */
    struct asnPhaseList *phases;
		/* Each Movement is given in turn */
		/* and contains its signal phase state, */
		/* mapping to the lanes it applies to, and */
		/* point in time it will end, and it */
		/* may contain both active and future states */
} asnIntersectionState;

typedef struct asnIntersectionStateList {
    struct asnIntersectionStateList *next;
    asnIntersectionState value;
} *asnIntersectionStateList;

	/* List of phases in one traffic signal */
typedef struct asnPhase {
    asnPhaseID      id;
		/* the group id is used to map to lists */
		/* of lanes (and their descriptions) */
		/* which this MovementState data applies to */
		/* see comments in the Remarks for usage details */
    struct asnPhaseStateList *phaseStates;
		/* Consisting of sets of movement data with: */
		/* a) SignalPhaseState */
		/* b) TimeChangeDetails, and */
		/* c) AdvisorySpeeds (optional ) */
		/* Note one or more of the movement events may be for */
		/* a future time and that this allows conveying multiple */
		/* predictive phase and movement timing for various uses */
		/* for the current signal group */
} asnPhase;

typedef struct asnPhaseList {
    struct asnPhaseList *next;
    asnPhase        value;
} *asnPhaseList;

typedef enum asnLightState {
    asnLightState_unavailable = 0,
		/* This state is used for unknown or error */
    asndark = 1,
		/* The signal is dark (unlit) */

		/* Reds */
    asnflashing_red = 2,
		/* Reserved for special scenarios */
    asnred = 3,
		/* Driver Action: */
		/* Stop vehicle at stop line. */
		/* Do not proceed. */

		/* Greens */
    asnflashing_green = 4,
		/* Reserved for special scenarios		*/
    asnpermissive_green = 5,
		/* Driver Action: */
		/* Proceed with caution, */
		/* must yield to all conflicting traffic */
		/* Conflicting traffic may be present */
		/* in the intersection conflict area */
    asnprotected_green = 6,
		/* Driver Action: */
		/* Proceed, tossing caution to the wind, */
		/* in indicated (allowed) direction. */

		/* Yellows / Ambers */
		/* The vehicle is not allowed to cross the stop bar if it is possible */
		/* to stop without danger. */
    asnyellow = 7,
		/* Driver Action: */
		/* Prepare to stop. */
		/* Proceed if unable to stop, */
		/* in indicated direction (to connected lane) */
		/* Clear Intersection. */
    asnflashing_yellow = 8
		/* Driver Action: */
		/* Proceed with caution, */
		/* Conflicting traffic may be present */
		/* in the intersection conflict area */
} asnLightState;

typedef struct asnTimeCountingDown {
    unsigned char   bit_mask;
#       define      asnminEndTime_present 0x80
#       define      asnmaxEndTime_present 0x40
#       define      asnTimeCountingDown_timeConfidence_present 0x20
#       define      asnnextStartTime_present 0x10
#       define      asnnextDuration_present 0x08
    asnTimeMark     startTime;
		/* When this phase state started, */
		/* if already started, the value is 0 */
    asnTimeMark     minEndTime;  /* optional; set in bit_mask
                                  * asnminEndTime_present if present */
		/* Expected shortest end time */
		/* the value is the min left time from now */
    asnTimeMark     maxEndTime;  /* optional; set in bit_mask
                                  * asnmaxEndTime_present if present */
		/* Expected longest end time */
		/* the value is the max left time from now */
    asnTimeMark     likelyEndTime;
		/* Best predicted value based on other data */
		/* the value is the likely left time from now */
    asnConfidence   timeConfidence;  /* optional; set in bit_mask
                                * asnTimeCountingDown_timeConfidence_present if
                                * present */
		/* Confidence of likelyTime */
    asnTimeMark     nextStartTime;  /* optional; set in bit_mask
                                     * asnnextStartTime_present if present */
		/* A rough estimate of time from now when this phase state may next occur again */
		/* used to support various ECO driving power management needs. */
		/* If already started, this value is recommended to be delivered. */
    asnTimeMark     nextDuration;  /* optional; set in bit_mask
                                    * asnnextDuration_present if present */
		/* A rough estimate of the time length of this phase state */
		/* when it may next occur again. */
		/* used to support various ECO driving power management needs. */
		/* If already started, this value is recommended to be delivered. */
} asnTimeCountingDown;

typedef struct asnUTCTiming {
    unsigned char   bit_mask;
#       define      asnminEndUTCTime_present 0x80
#       define      asnmaxEndUTCTime_present 0x40
#       define      asnUTCTiming_timeConfidence_present 0x20
#       define      asnnextStartUTCTime_present 0x10
#       define      asnnextEndUTCTime_present 0x08
    asnTimeMark     startUTCTime;
		/* If already started, the value represents */
		/* the time stamp when this phase state started. */
		/* If not, the value represents */
		/* the time stamp when this phase state starts. */
    asnTimeMark     minEndUTCTime;  /* optional; set in bit_mask
                                     * asnminEndUTCTime_present if present */
		/* The time stamp when this state 1st ends in shortest time */
    asnTimeMark     maxEndUTCTime;  /* optional; set in bit_mask
                                     * asnmaxEndUTCTime_present if present */
		/* The time stamp when this state 1st ends in longest time */
    asnTimeMark     likelyEndUTCTime;
		/* The time stamp when this state 1st ends in best predicted time */
    asnConfidence   timeConfidence;  /* optional; set in bit_mask
                                      * asnUTCTiming_timeConfidence_present if
                                      * present */
		/* Confidence of likelyEndUTCTime */
    asnTimeMark     nextStartUTCTime;  /* optional; set in bit_mask
                                        * asnnextStartUTCTime_present if
                                        * present */
		/* A rough estimate of UTC time stamp when this phase state may next occur again */
		/* used to support various ECO driving power management needs. */
		/* If already started, this value is recommended to be delivered. */
    asnTimeMark     nextEndUTCTime;  /* optional; set in bit_mask
                                      * asnnextEndUTCTime_present if present */
		/* A rough estimate of UTC time stamp when this phase state ends again */
		/* used to support various ECO driving power management needs. */
		/* If already started, this value is recommended to be delivered. */
} asnUTCTiming;

typedef struct asnTimeChangeDetails {
    unsigned short  choice;
#       define      asncounting_chosen 1
#       define      asnutcTiming_chosen 2
    union {
        asnTimeCountingDown counting;  /* to choose, set choice to
                                        * asncounting_chosen */
        asnUTCTiming    utcTiming;  /* to choose, set choice to
                                     * asnutcTiming_chosen */
    } u;
} asnTimeChangeDetails;

typedef struct asnPhaseState {
    unsigned char   bit_mask;
#       define      asntiming_present 0x80
    asnLightState   light;
		/* Consisting of: */
		/* Phase state (the basic 11 states) */
		/* Directional, protected, or permissive state */
    asnTimeChangeDetails timing;  /* optional; set in bit_mask asntiming_present
                                   * if present */
		/* Timing Data in UTC time stamps for event */
		/* includes start and min/max end times of phase */
		/* confidence and estimated next occurrence */
} asnPhaseState;

typedef struct asnPhaseStateList {
    struct asnPhaseStateList *next;
    asnPhaseState   value;
} *asnPhaseStateList;

	/* The value 0 shall be used when the ID is */
	/* not available or not known */
	/* the value 255 is reserved to indicate a */
	/* permanent green movement state */
	/* therefore a simple 8 phase signal controller */
	/* device might use 1..9 as its groupIDs */
typedef struct asnTestMsg {
    asnMsgCount     msgCnt;
    asn_octet2      userData;
} asnTestMsg;

typedef struct asnPathHistoryPoint {
    unsigned char   bit_mask;
#       define      asnPathHistoryPoint_speed_present 0x80
#       define      asnPathHistoryPoint_posAccuracy_present 0x40
#       define      asnPathHistoryPoint_heading_present 0x20
    asnPositionOffsetLLV llvOffset;
    asnTimeOffset   timeOffset;
		/* Offset backwards in time */
    asnSpeed        speed;  /* optional; set in bit_mask
                             * asnPathHistoryPoint_speed_present if present */
		/* Speed over the reported period */
    asnPositionConfidenceSet posAccuracy;  /* optional; set in bit_mask
                                   * asnPathHistoryPoint_posAccuracy_present if
                                   * present */
		/* The accuracy of this value */
    asnCoarseHeading heading;  /* optional; set in bit_mask
                                * asnPathHistoryPoint_heading_present if
                                * present */
		/* overall heading */
} asnPathHistoryPoint;

typedef struct asnPathHistoryPointList {
    struct asnPathHistoryPointList *next;
    asnPathHistoryPoint value;
} *asnPathHistoryPointList;

	/* 考虑8s规划，1s用10个点表示，共需80个点。预留到100个 */
typedef struct asnPathPlanningPoint {
    unsigned short  bit_mask;
#       define      asnposInMap_present 0x8000
#       define      asnPathPlanningPoint_posAccuracy_present 0x4000
#       define      asnPathPlanningPoint_speed_present 0x2000
#       define      asnPathPlanningPoint_speedCfd_present 0x1000
#       define      asnPathPlanningPoint_heading_present 0x0800
#       define      asnPathPlanningPoint_headingCfd_present 0x0400
#       define      asnPathPlanningPoint_accelSet_present 0x0200
#       define      asnPathPlanningPoint_acc4WayConfidence_present 0x0100
#       define      asnestimatedTime_present 0x0080
#       define      asnPathPlanningPoint_timeConfidence_present 0x0040
    asnReferenceLink posInMap;  /* optional; set in bit_mask asnposInMap_present
                                 * if present */
		/* Lane and Link location related to MAP */
    asnPositionOffsetLLV pos;
		/* Target location in the path */
    asnPositionConfidenceSet posAccuracy;  /* optional; set in bit_mask
                                  * asnPathPlanningPoint_posAccuracy_present if
                                  * present */
    asnSpeed        speed;  /* optional; set in bit_mask
                             * asnPathPlanningPoint_speed_present if present */
		/* Target speed or recommended speed when passing the target position */
    asnSpeedConfidence speedCfd;  /* optional; set in bit_mask
                                   * asnPathPlanningPoint_speedCfd_present if
                                   * present */
		/* Considering the acceptable range of the above target speed */
    asnHeading      heading;  /* optional; set in bit_mask
                               * asnPathPlanningPoint_heading_present if
                               * present */
    asnHeadingConfidence headingCfd;  /* optional; set in bit_mask
                                       * asnPathPlanningPoint_headingCfd_present
                                       * if present */
    asnAccelerationSet4Way accelSet;  /* optional; set in bit_mask
                                       * asnPathPlanningPoint_accelSet_present
                                       * if present */
    asnAccSet4WayConfidence acc4WayConfidence;  /* optional; set in bit_mask
                            * asnPathPlanningPoint_acc4WayConfidence_present if
                            * present */
    asnTimeOffset   estimatedTime;  /* optional; set in bit_mask
                                     * asnestimatedTime_present if present */
		/* Estimated time when vehicle reaches the target position */
		/* Time offset is calculated from secMark of this message */
    asnConfidence   timeConfidence;  /* optional; set in bit_mask
                               * asnPathPlanningPoint_timeConfidence_present if
                               * present */
		/* Considering the acceptable range of the above estimated time */
} asnPathPlanningPoint;

typedef enum asnReqStatus {
    asnReqStatus_unknown = 0,
    asnReqStatus_request = 1,
		/* raise the request and not comfirmed by the target devices yet */
    asncomfirmed = 2,
		/* this request is already comfirmed through some methods */
    asncancel = 3,
		/* vehicle claims to cancel this request */
    asncomplete = 4
		/* vehicle has just completed this driving behavior */
} asnReqStatus;

typedef struct asnReq_LaneChange {
    asnNodeReferenceID upstreamNode;
		/* Upstream node of the target link */
    asnNodeReferenceID downstreamNode;
		/* Downstream node of the target link */
    asnLaneID       targetLane;
		/* Target lane to change to */
} asnReq_LaneChange;

typedef struct asnReq_ClearTheWay {
    unsigned char   bit_mask;
#       define      asnReq_ClearTheWay_relatedPath_present 0x80
#       define      asnReq_ClearTheWay_tBegin_present 0x40
#       define      asnReq_ClearTheWay_tEnd_present 0x20
    asnNodeReferenceID upstreamNode;
    asnNodeReferenceID downstreamNode;
    asnLaneID       targetLane;
		/* Target lane to clear the way */
    asnReferencePath relatedPath;  /* optional; set in bit_mask
                                    * asnReq_ClearTheWay_relatedPath_present if
                                    * present */
		/* Describe the detailed road area to clear */
    asnDDateTime    tBegin;  /* optional; set in bit_mask
                              * asnReq_ClearTheWay_tBegin_present if present */
		/* The beginning time required to clearing the way */
    asnDDateTime    tEnd;  /* optional; set in bit_mask
                            * asnReq_ClearTheWay_tEnd_present if present */
		/* The time to end clearing the way */
} asnReq_ClearTheWay;

typedef struct asnReq_SignalPriority {
    unsigned char   bit_mask;
#       define      asnestimatedArrivalTime_present 0x80
#       define      asndistance2Intersection_present 0x40
    asnNodeReferenceID intersectionId;
		/* Intersection id indicating the target traffic signal */
    asnMovementEx   requiredMov;
		/* Movement info. required including remote intersection id, target phase id and turning direction */
    asnTimeOffset   estimatedArrivalTime;  /* optional; set in bit_mask
                                            * asnestimatedArrivalTime_present if
                                            * present */
		/* Estimated arrival time to the intersection */
    unsigned short  distance2Intersection;  /* optional; set in bit_mask
                                             * asndistance2Intersection_present
                                             * if present */
		/* Unit 0.1m */
} asnReq_SignalPriority;

typedef struct asnReq_SensorSharing {
    struct asnReferencePathList *detectArea;
} asnReq_SensorSharing;

typedef struct asnParkingRequest {
    unsigned short  length;  /* number of significant bits */
    unsigned char   *value;
} asnParkingRequest;
#define                     asnenter 0x80
#define                     asnenter_byte 0
#define                     asnParkingRequest_exit 0x40
#define                     asnParkingRequest_exit_byte 0
#define                     asnParkingRequest_park 0x20
#define                     asnParkingRequest_park_byte 0
#define                     asnpay 0x10
#define                     asnpay_byte 0
#define                     asnunloadPassenger 0x08
#define                     asnunloadPassenger_byte 0
#define                     asnpickupPassenger 0x04
#define                     asnpickupPassenger_byte 0
#define                     asnunloadCargo 0x02
#define                     asnunloadCargo_byte 0
#define                     asnloadCargo 0x01
#define                     asnloadCargo_byte 0
#define                     asnParkingRequest_reserved1 0x80
#define                     asnParkingRequest_reserved1_byte 1
#define                     asnreverved2 0x40
#define                     asnreverved2_byte 1
#define                     asnParkingRequest_reserved3 0x20
#define                     asnParkingRequest_reserved3_byte 1
#define                     asnreverved4 0x10
#define                     asnreverved4_byte 1

typedef struct asnReq_ParkingArea {
    unsigned char   bit_mask;
#       define      asnparkingType_present 0x80
#       define      asnexpectedParkingSlotID_present 0x40
    asnVehicleClassification vehicleClass;
    asnParkingRequest req;
		/* request from this vehicle for the parking area */
		/* or traffic station */
    asnParkingType  parkingType;  /* optional; set in bit_mask
                                   * asnparkingType_present if present */
		/* if the vehicle needs a parking slot of certain type */
    unsigned short  expectedParkingSlotID;  /* optional; set in bit_mask
                                             * asnexpectedParkingSlotID_present
                                             * if present */
		/* if the vehicle already has a target parking slot */
} asnReq_ParkingArea;

typedef struct asnReqInfo {
    unsigned short  choice;
#       define      asnlaneChange_chosen 1
#       define      asnclearTheWay_chosen 2
#       define      asnsignalPriority_chosen 3
#       define      asnsensorSharing_chosen 4
#       define      asnReqInfo_parking_chosen 5
    union {
        asnReq_LaneChange laneChange;  /* to choose, set choice to
                                        * asnlaneChange_chosen */
        asnReq_ClearTheWay clearTheWay;  /* to choose, set choice to
                                          * asnclearTheWay_chosen */
        asnReq_SignalPriority signalPriority;  /* to choose, set choice to
                                                * asnsignalPriority_chosen */
        asnReq_SensorSharing sensorSharing;  /* to choose, set choice to
                                              * asnsensorSharing_chosen */
        asnReq_ParkingArea parking;  /* to choose, set choice to
                                      * asnReqInfo_parking_chosen */
    } u;
} asnReqInfo;

typedef struct asn_octet3 {
    unsigned short  length;
    unsigned char   value[1];
} asn_octet3;

typedef struct asnDriveRequest {
    unsigned char   bit_mask;
#       define      asnreqPriority_present 0x80
#       define      asntargetVeh_present 0x40
#       define      asntargetRSU_present 0x20
#       define      asnDriveRequest_info_present 0x10
#       define      asnDriveRequest_lifeTime_present 0x08
    unsigned short  reqID;
		/* local ID of this request */
		/* same request in serial VIR messages should keep the same reqID */
    asnReqStatus    status;
    asn_octet3      reqPriority;  /* optional; set in bit_mask
                                   * asnreqPriority_present if present */
		/* The lower five bits are reserved and shall be set to zero */
		/* Value from B00000000 to B11100000 represents the lowest to the highest level */
    asn_octet1      targetVeh;  /* optional; set in bit_mask
                                 * asntargetVeh_present if present */
		/* the temporary ID of target vehicle */
    asn_octet1      targetRSU;  /* optional; set in bit_mask
                                 * asntargetRSU_present if present */
		/* the temporary ID of target RSU */
    asnReqInfo      info;  /* optional; set in bit_mask
                            * asnDriveRequest_info_present if present */
    asnTimeOffset   lifeTime;  /* optional; set in bit_mask
                                * asnDriveRequest_lifeTime_present if present */
		/* Lifetime of this request */
		/* Time offset is calculated from secMark of this message */
} asnDriveRequest;

typedef struct asnIARData {
    unsigned char   bit_mask;
#       define      asncurrentPos_present 0x80
#       define      asnIARData_path_Planning_present 0x40
#       define      asncurrentBehavior_present 0x20
#       define      asnreqs_present 0x10
    asnPathPlanningPoint currentPos;  /* optional; set in bit_mask
                                       * asncurrentPos_present if present */
		/* current position in MAP */
    struct asnPathPlanning *path_Planning;  /* optional; set in bit_mask
                                             * asnIARData_path_Planning_present
                                             * if present */
		/* real time path planning that is shared with neighbors */
		/* list in chronological order */
    asnDriveBehavior currentBehavior;  /* optional; set in bit_mask
                                        * asncurrentBehavior_present if
                                        * present */
		/* drive behavior related to the path planning */
    struct asn_seqof9 {
        struct asn_seqof9 *next;
        asnDriveRequest value;
    } *reqs;  /* optional; set in bit_mask asnreqs_present if present */
} asnIARData;

typedef struct asnVehIntentionAndRequest {
    asnMsgCount     msgCnt;
    asn_octet1      id;
		/* temperary vehicle ID */
		/* same as id in BSM */
    asnDSecond      secMark;
    asnPosition3D   refPos;
		/* vehicle real position relates to secMark */
    asnIARData      intAndReq;
		/* vehicle intention and request */
} asnVehIntentionAndRequest;

typedef struct asnPathPlanning {
    struct asnPathPlanning *next;
    asnPathPlanningPoint value;
} *asnPathPlanning;

typedef struct asnRST {
    asnDDateTime    time;
    asn_octet1      id;
		/* RSU Id */
    struct asnPaymentList *paymentList;
		/* Payment/service list */
} asnRST;

typedef enum asnOBUType {
    asnoemObu = 0,
    asnaftermarketObu = 1,
    asnmobilePhone = 2
} asnOBUType;

typedef struct asnOBUMotionStatus {
    unsigned char   bit_mask;
#       define      asnOBUMotionStatus_pos_present 0x80
#       define      asnOBUMotionStatus_heading_present 0x40
#       define      asnOBUMotionStatus_speed_present 0x20
    asnPosition3D   pos;  /* optional; set in bit_mask
                           * asnOBUMotionStatus_pos_present if present */
    asnHeading      heading;  /* optional; set in bit_mask
                               * asnOBUMotionStatus_heading_present if
                               * present */
    asnSpeed        speed;  /* optional; set in bit_mask
                             * asnOBUMotionStatus_speed_present if present */
} asnOBUMotionStatus;

typedef struct asnOBUInfo {
    unsigned char   bit_mask;
#       define      asnobuMotionStatus_present 0x80
    asnOBUType      obuType;
    asnOBUMotionStatus obuMotionStatus;  /* optional; set in bit_mask
                                          * asnobuMotionStatus_present if
                                          * present */
} asnOBUInfo;

typedef struct asnRandStr8 {
    unsigned short  length;
    unsigned char   value[8];
} asnRandStr8;

typedef struct asnVSI {
    unsigned char   bit_mask;
#       define      asnVSI_targetId_present 0x80
#       define      asnobuInfo_present 0x40
#       define      asnvpapplicationList_present 0x20
#       define      asnrndOBU_present 0x10
    asnDDateTime    time;
    asn_octet1      obuId;
		/* Host OBU Id */
    asn_octet1      targetId;  /* optional; set in bit_mask
                                * asnVSI_targetId_present if present */
		/* Target RSU Id, necessary in broadcast mode */
    asnOBUInfo      obuInfo;  /* optional; set in bit_mask asnobuInfo_present if
                               * present */
    struct asnVPApplicationList *vpapplicationList;  /* optional; set in
                                   * bit_mask asnvpapplicationList_present if
                                   * present */
    asnRandStr8     rndOBU;  /* optional; set in bit_mask asnrndOBU_present if
                              * present */
		/*CON ETC SEC Mode	*/
		/* Rand string of length(8) from ESAM */
} asnVSI;

typedef enum asnPaymentEntityID {
    asnsystem = 0,                      /* reserved */
    asnfreeflow = 1,            /* free flow toll */
    asnenclosed = 2,            /* enclosed road toll */
    asncongestion = 3,          /* Congestion fee */
    asnPaymentEntityID_charging = 4,            /* Charging fee */
    asnPaymentEntityID_parking = 5                     /* Parking fee */
} asnPaymentEntityID;

typedef struct asnRangeOfFile {
    unsigned short  offset;
		/*文件实际偏移量 */
    unsigned short  length;
		/*信息长度 */
} asnRangeOfFile;

typedef struct asnGetTollDataRq {
    unsigned char   bit_mask;
#       define      asnGetTollDataRq_tollInfo_present 0x80
#       define      asnkeyIdForAC_present 0x40
    asnRangeOfFile  vehicleInfo;
		/*文件系统中取车辆信息 */
    asnRangeOfFile  tollInfo;  /* optional; set in bit_mask
                                * asnGetTollDataRq_tollInfo_present if
                                * present */
		/*文件系统中取出入口信息 */
    unsigned short  keyIdForAC;  /* optional; set in bit_mask
                                  * asnkeyIdForAC_present if present */
		/*秘钥标识，指示OBU选择相应秘钥进行访问许可认证 */
} asnGetTollDataRq;

typedef struct asnFile {
    unsigned short  length;
    unsigned char   value[127];
} asnFile;

typedef struct asnGetTollDataRs {
    unsigned char   bit_mask;
#       define      asnGetTollDataRs_tollInfo_present 0x80
    asnFile         vehicleInfo;
		/*车辆信息文件内容 */
    asnFile         tollInfo;  /* optional; set in bit_mask
                                * asnGetTollDataRs_tollInfo_present if
                                * present */
		/*出入口信息文件内容 */
} asnGetTollDataRs;

typedef struct asnGetSecureRq {
    unsigned char   bit_mask;
#       define      asnkeyIdForEncrypt_present 0x80
    asnRangeOfFile  vehicleInfo;
		/*文件系统中取车辆信息 */
    asnRandStr8     rndRsuForAuthen;
		/*8字节随机数 */
    unsigned short  keyIdForAuthen;
		/*指示信息鉴别秘钥的秘钥标识 */
    unsigned short  keyIdForEncrypt;  /* optional; set in bit_mask
                                       * asnkeyIdForEncrypt_present if
                                       * present */
		/*指示加密秘钥的版本秘钥标识,不选取表示不对数据加密 */
} asnGetSecureRq;

typedef struct asnGetSecureRs {
    asnRangeOfFile  file;
		/*车辆信息文件 */
    asn_octet1      authenticator;
		/*RSU对OBU进行认证的信息鉴别码 */
} asnGetSecureRs;

typedef struct asn_octet4 {
    unsigned short  length;
    unsigned char   value[4];
} asn_octet4;

typedef struct asnTransPara {
    asn_octet4      transAmount;
		/*通行费额 */
    asn_octet3      transType;
		/*交易类型 */
    struct {
        unsigned short  length;
        unsigned char   value[6];
    } terminalID;
		/*终端编号 */
    asn_octet4      transSN;
		/*交易序号	*/
    struct {
        unsigned short  length;
        unsigned char   value[7];
    } transTime;
		/*通行时间 */
    struct {
        unsigned short  length;
        unsigned char   value[3];
    } transStationID;
		/*门架/收费站编号	*/
} asnTransPara;

typedef struct asnPartOfFile {
    unsigned short  offset;
		/*文件实际偏移量 */
    unsigned short  length;
		/*信息长度 */
    asnFile         fileContent;
		/*信息内容 */
} asnPartOfFile;

typedef long            asnStationOrGantryId;

typedef struct asnTollingPos {
    unsigned char   bit_mask;
#       define      asnTollingPos_pos_present 0x80
    asnStationOrGantryId id;
        /*收费站或门架编号 */
    asnPosition3D   pos;  /* optional; set in bit_mask asnTollingPos_pos_present
                           * if present */
        /*收费站或门架位置 */
} asnTollingPos;

typedef struct asnSetTollDataRq {
    unsigned char   bit_mask;
#       define      asnrndRSU_present 0x80
#       define      asntransPara_present 0x40
#       define      asnSetTollDataRq_tollInfo_present 0x20
#       define      asntollingPos_present 0x10
#       define      asnkeyIdForAuthen_present 0x08
    asnRandStr8     rndRSU;  /* optional; set in bit_mask asnrndRSU_present if
                              * present */
		/* 获取PSAM 8字节随机数 */
		/* Mandatory in ETC Security Mode */
    asnTransPara    transPara;  /* optional; set in bit_mask
                                 * asntransPara_present if present */
		/*交易记录，存于DF01/EF04 */
    asnPartOfFile   tollInfo;  /* optional; set in bit_mask
                                * asnSetTollDataRq_tollInfo_present if
                                * present */
                               /*CON ETC SEC Mode */
		/*出入站信息 */
    asnTollingPos   tollingPos;  /* optional; set in bit_mask
                                  * asntollingPos_present if present */
		/*当前收费站/门架信息 */
    unsigned short  keyIdForAuthen;  /* optional; set in bit_mask
                                      * asnkeyIdForAuthen_present if present */
                                     /*CON ETC SEC Mode */
		/*秘钥版本，指示OBU选择相应的秘钥进行信息鉴别 */
} asnSetTollDataRq;

typedef struct asnAccountInfo {
    struct {
        unsigned short  length;
        unsigned char   value[32];
    } account;
        /*账号 */
} asnAccountInfo;

typedef struct asnTransCredential {
    asn_octet2      tc;
} asnTransCredential;

typedef struct asnSetTollDataRs {
    unsigned char   bit_mask;
#       define      asntacInfo_present 0x80
#       define      asnauthenticator_present 0x40
#       define      asnaccountInfo_present 0x20
#       define      asntransCredential_present 0x10
    asn_octet4      tacInfo;  /* optional; set in bit_mask asntacInfo_present if
                               * present */
                              /*CON ETC SEC Mode */
		/*TAC码 */
    asn_octet1      authenticator;  /* optional; set in bit_mask
                                     * asnauthenticator_present if present */
                                    /*CON ETC SEC Mode */
		/*鉴别报文 */
    asnAccountInfo  accountInfo;  /* optional; set in bit_mask
                                   * asnaccountInfo_present if present */
                                  /*CON LTE-V SEC Mode */
    asnTransCredential transCredential;  /* optional; set in bit_mask
                                          * asntransCredential_present if
                                          * present */
                                         /*CON LTE-V SEC Mode */
} asnSetTollDataRs;

typedef enum asnChannelID {
    asnChannelID_obu = 0,
    asnesam = 1,
    asnicc = 2,
    asnhmi = 3,
    asnbeeper = 4
} asnChannelID;

typedef struct asnChannelRq {
    asnChannelID    channelid;
		/*通道标识ID */
    struct asnApduList *apdu;
		/*通道指令数据 */
} asnChannelRq;

typedef struct asnChannelRs {
    asnChannelID    channelid;
		/*通道标识ID */
    struct asnApduList *apdu;
		/*通道指令数据 */
} asnChannelRs;

typedef enum asnTollResult {
    asnok = 0,
		/*正常交易 */
    asnnok = 1,
		/*交易异常（通信、设备故障） */
    asncontactOperator = 2
		/*联系运营商（过期、黑名单）				*/
} asnTollResult;

typedef struct asnSetMMIRq {
    asnTollResult   toll;
} asnSetMMIRq;

typedef struct asnTransInfo {
    unsigned short  choice;
#       define      asngetTollDataRq_chosen 1
#       define      asngetTollDataRs_chosen 2
#       define      asngetSecureRq_chosen 3
#       define      asngetSecureRs_chosen 4
#       define      asnsetTollDataRq_chosen 5
#       define      asnsetTollDataRs_chosen 6
#       define      asntransferChannelRq_chosen 7
#       define      asntransferChannelRs_chosen 8
#       define      asnsetMMIRq_chosen 9
    union {
        asnGetTollDataRq getTollDataRq;  /* to choose, set choice to
                                          * asngetTollDataRq_chosen */
		/*单片式请求获取收费数据、车辆信息 */
        asnGetTollDataRs getTollDataRs;  /* to choose, set choice to
                                          * asngetTollDataRs_chosen */
		/*单片式响应收费数据、车辆信息 */
        asnGetSecureRq  getSecureRq;  /* to choose, set choice to
                                       * asngetSecureRq_chosen */
		/*双片式请求获取车辆信息 */
        asnGetSecureRs  getSecureRs;  /* to choose, set choice to
                                       * asngetSecureRs_chosen */
		/*双片式响应车辆信息 */
        asnSetTollDataRq setTollDataRq;  /* to choose, set choice to
                                          * asnsetTollDataRq_chosen */
		/*请求写入通信凭证和入口信息 */
        asnSetTollDataRs setTollDataRs;  /* to choose, set choice to
                                          * asnsetTollDataRs_chosen */
		/*响应写入通信凭证和入口信息操作 */
        asnChannelRq    transferChannelRq;  /* to choose, set choice to
                                             * asntransferChannelRq_chosen */
		/*请求向OBU内模块发送操作指令 */
        asnChannelRs    transferChannelRs;  /* to choose, set choice to
                                             * asntransferChannelRs_chosen */
		/*操作指令结果响应 */
        asnSetMMIRq     setMMIRq;  /* to choose, set choice to
                                    * asnsetMMIRq_chosen */
		/*用户提示 */
    } u;
} asnTransInfo;

typedef struct asnAction_Request {
    unsigned char   bit_mask;
#       define      asnAction_Request_targetId_present 0x80
#       define      asnaccessCredentials_present 0x40
    asnDDateTime    time;
    ossBoolean      mode;
		/* Mode 1 needs confirm; Mode 0 needs not */
    asn_octet1      sourceId;
		/* Rsu ID */
    asn_octet1      targetId;  /* optional; set in bit_mask
                                * asnAction_Request_targetId_present if
                                * present */
		/* Target OBU ID,  necessary in broadcast mode */
    asnPaymentEntityID paymentEntityId;
    asnTransInfo    actionParameter;
    asn_octet1      accessCredentials;  /* optional; set in bit_mask
                                         * asnaccessCredentials_present if
                                         * present */
		/*CON ETC SEC Mode */
		/* RSU's certification to visit OBU, calculated from rndOBU in VSI */
} asnAction_Request;

typedef enum asnReturnStatus {
    asnnoError = 0,
		/*请求的操作执行成功		*/
    asnaccessDenied = 1,
		/*请求操作未执行（安全原因） */
    asnargumnetError = 2,
		/*文件内容访问失败 */
    asncomplexityLimitation = 3,
		/*请求操作参数复杂而未执行 */
    asnprocessingFailure = 4,
		/*操作要一般性失败 */
    asnprocessing = 5
		/*操作正在处理但结果不能用 */
} asnReturnStatus;

typedef struct asnAction_Response {
    unsigned char   bit_mask;
#       define      asnAction_Response_targetId_present 0x80
#       define      asnresponseParameter_present 0x40
    asnDDateTime    time;
    asn_octet1      sourceId;
		/* Host OBU Id */
    asn_octet1      targetId;  /* optional; set in bit_mask
                                * asnAction_Response_targetId_present if
                                * present */
		/* Target RSU Id, necessary in broadcast mode */
    asnPaymentEntityID paymentEntityId;
    asnTransInfo    responseParameter;  /* optional; set in bit_mask
                                         * asnresponseParameter_present if
                                         * present */
    asnReturnStatus ret;
} asnAction_Response;

typedef struct asnVehiclePaymentMessage {
    asnMsgCount     msgCnt;
    struct {
        unsigned short  choice;
#           define      asninitialzation_request_chosen 1
#           define      asninitialzation_response_chosen 2
#           define      asnaction_request_chosen 3
#           define      asnaction_response_chosen 4
        union {
            asnRST          initialzation_request;  /* to choose, set choice to
                                           * asninitialzation_request_chosen */
			/*Roadside Service Talbe */
            asnVSI          initialzation_response;  /* to choose, set choice to
                                          * asninitialzation_response_chosen */
			/*Vehicle Service Indication */
            asnAction_Request action_request;  /* to choose, set choice to
                                                * asnaction_request_chosen */
            asnAction_Response action_response;  /* to choose, set choice to
                                                 * asnaction_response_chosen */
        } u;
    } payment;
} asnVehiclePaymentMessage;

typedef enum asnTollingNodeType {
    asnentranceStation = 0,
    asnexitStation = 1,
    asnentranceAndExitStation = 2,
    asngantry = 3
} asnTollingNodeType;

typedef enum asnTollingDirection {
    asnnorth = 0,
    asnnortheast = 1,
    asneast = 2,
    asnsoutheast = 3,
    asnsouth = 4,
    asnsouthwest = 5,
    asnwest = 6,
    asnnorthwest = 7
} asnTollingDirection;

typedef struct asnTollingNodeInfo {
    unsigned char   bit_mask;
#       define      asnTollingNodeInfo_id_present 0x80
#       define      asnTollingNodeInfo_pos_present 0x40
#       define      asntollingNodeType_present 0x20
#       define      asntollingDirection_present 0x10
    asnStationOrGantryId id;  /* optional; set in bit_mask
                               * asnTollingNodeInfo_id_present if present */
		/* Tolling Station or Tolling Gantry Id */
    asnPosition3D   pos;  /* optional; set in bit_mask
                           * asnTollingNodeInfo_pos_present if present */
    asnTollingNodeType tollingNodeType;  /* optional; set in bit_mask
                                          * asntollingNodeType_present if
                                          * present */
    asnTollingDirection tollingDirection;  /* optional; set in bit_mask
                                            * asntollingDirection_present if
                                            * present */
} asnTollingNodeInfo;

typedef struct asnTollInfo {
    unsigned char   bit_mask;
#       define      asnprice_present 0x80
#       define      asnentrancePos_present 0x40
#       define      asnexitPos_present 0x20
#       define      asntollRoad_present 0x10
#       define      asntollPath_present 0x08
#       define      asntimeBegin_present 0x04
#       define      asntimeEnd_present 0x02
    unsigned int    price;  /* optional; set in bit_mask asnprice_present if
                             * present */
		/* Estimated price, value 1 = ￥0.01 */
    asnPositionOffsetLLV entrancePos;  /* optional; set in bit_mask
                                        * asnentrancePos_present if present */
		/* Entrance of the toll road */
    asnPositionOffsetLLV exitPos;  /* optional; set in bit_mask
                                    * asnexitPos_present if present */
		/* Exit of the toll road */
    struct asn_seqof10 {
        struct asn_seqof10 *next;
        asnNodeReferenceID value;
    } *tollRoad;  /* optional; set in bit_mask asntollRoad_present if present */
		/* Toll road represented by a list of node id sorted from upstream to downstream */
    asnReferencePath tollPath;  /* optional; set in bit_mask asntollPath_present
                                 * if present */
		/* Toll path represented by a point list from upstream to downstream */
    asnDDateTime    timeBegin;  /* optional; set in bit_mask
                                 * asntimeBegin_present if present */
		/* Beginning of charging time */
    asnDDateTime    timeEnd;  /* optional; set in bit_mask asntimeEnd_present if
                               * present */
		/* End of charging time */
} asnTollInfo;

typedef struct asnPaymentInfoType1 {
    unsigned char   bit_mask;
#       define      asntollingNodeInfo_present 0x80
#       define      asnPaymentInfoType1_tollInfo_present 0x40
#       define      asnserviceInfo_present 0x20
    asnTollingNodeInfo tollingNodeInfo;  /* optional; set in bit_mask
                                          * asntollingNodeInfo_present if
                                          * present */
    asnTollInfo     tollInfo;  /* optional; set in bit_mask
                                * asnPaymentInfoType1_tollInfo_present if
                                * present */
    asn_octet2      serviceInfo;  /* optional; set in bit_mask
                                   * asnserviceInfo_present if present */
		/* Reserved for more payment sevices */
} asnPaymentInfoType1;

typedef struct asnPaymentInfo {
    unsigned short  choice;
#       define      asnpaymentInfoType1_chosen 1
    union {
        asnPaymentInfoType1 paymentInfoType1;  /* to choose, set choice to
                                                * asnpaymentInfoType1_chosen */
		/* other types of payment info. */
		/* can be extended in the future */
    } u;
} asnPaymentInfo;

typedef struct asnApplicationParameter {
    asnPaymentEntityID pid;
		/* Payment type of road toll or services */
    asnPaymentInfo  paymentInfo;
		/* Payment detailed information */
} asnApplicationParameter;

typedef struct asnPaymentList {
    struct asnPaymentList *next;
    asnApplicationParameter value;
} *asnPaymentList;

typedef enum asnEquipmentClass {
    asnonechipOBU = 0,
		/*单片式 */
    asniccOBU = 1,
		/*双片式 */
    asncpcOBU = 2
		/*CPC卡 */
} asnEquipmentClass;

typedef struct asnGBICCInfo {
    asn_octet2      iccIssueInfo;
		/*卡片发行节本信息 */
    asn_octet2      iccUniTollInfo;
		/*联网典型收费信息 */
    asn_octet2      iccBalance;
		/*电子钱包余额 */
} asnGBICCInfo;

typedef struct asnDate {
    asnDYear        year;
    asnDMonth       month;
    asnDDay         day;
} asnDate;

typedef struct asnSysInfo {
    asn_octet1      contractProvider;
    long            contractType;
    long            contractVersion;
    asn_octet1      contractSerialNumer;
    asnDate         contractSignedDate;
    asnDate         contractExpiredDate;
    struct {
        unsigned short  length;
        unsigned char   value[64];
    } reserved;
} asnSysInfo;

typedef struct asnVehicleDimensions {
    unsigned short  vehicleLength;
    unsigned short  vehicleWidth;
    unsigned short  vehicleHeigth;
} asnVehicleDimensions;

typedef struct asn_octet5 {
    unsigned short  length;
    unsigned char   value[16];
} asn_octet5;

typedef struct asnVehicleInfo {
    unsigned char   bit_mask;
#       define      asnVehicleInfo_description_present 0x80
    struct {
        unsigned short  length;
        unsigned char   value[12];
    } vehicleLicencePlateNumber;
        /*车牌号码，全牌照（汉字+字母+数字）信息，汉字采用GB/T 2312编码，字母数字采用ASCII编码 */
    struct {
        unsigned short  length;
        unsigned char   value[2];
    } vehicleLicencePlateColor;
        /*车牌颜色，二进制编码表示。0-蓝色，1-黄色，2-黑色，3-白色，4-小型新能源汽车号牌颜色，5-大型新能源汽车号牌颜色 */
    long            vehicleTollingClass;
        /*车辆计费类型。1-一型客车，2-二型客车，3-三型客车，4-四型客车，5-五型客车，6-六型客车， */
        /*            11-一型货车，12-二型货车，13-三型货车，14-四型货车，15-五型货车，16-六型货车 */
    long            vehicleUserType;
        /*车辆用户类型。0-普通车，6-公务车，8-军警车，10-紧急车，12-免费，14-车队 */
    asnVehicleDimensions vehicleDimensions;
        /*车辆尺寸，长宽高，单位分米。 */
    unsigned short  vehicleWheels;
        /*车轮数 */
    unsigned short  vehicleAxles;
        /*车轴数 */
    unsigned short  vehicleWheelBases;
        /*轴距，单位分米 */
    unsigned int    vehicleWeightLimits;
        /*车辆载重（货车）或座位数（客车），单位为kg（货车）或座（客车） */
    asn_octet5      vehicleSpecificInformation;
        /*车辆特征描述，字符用ASCII编码表示，汉字用机内码表示，如“某品牌307” */
    asn_octet5      vehicleEngineNumber;
        /*车辆发动机号 */
    struct {
        unsigned short  length;
        unsigned char   value[256];
    } description;  /* optional; set in bit_mask
                     * asnVehicleInfo_description_present if present */
        /* Other information description of the vehicle */
} asnVehicleInfo;

typedef struct asnPassedPos {
    unsigned char   bit_mask;
#       define      asntollingAmount_present 0x80
    asnTollingPos   tollingPos;
        /*经过的收费站/门架信息 */
    asnDDateTime    tollingTime;
        /*经过收费站/门架时的时间 */
    asn_octet4      tollingAmount;  /* optional; set in bit_mask
                                     * asntollingAmount_present if present */
		/*收费金额 */
} asnPassedPos;

typedef struct asnPassedSitesInfo {
    unsigned char   bit_mask;
#       define      asnentranceInfo_present 0x80
#       define      asnpassedPos_present 0x40
    asnPassedPos    entranceInfo;  /* optional; set in bit_mask
                                    * asnentranceInfo_present if present */
        /*进场（比如进入高速）信息 */
    struct asn_seqof11 {
        struct asn_seqof11 *next;
        asnPassedPos    value;
    } *passedPos;  /* optional; set in bit_mask asnpassedPos_present if
                    * present */
        /*过站（比如经过收费门架）信息 */
} asnPassedSitesInfo;

typedef struct asnOBUPaymentInfoType1 {
    unsigned char   bit_mask;
#       define      asnequipmentClass_present 0x80
#       define      asngbiCCInfo_present 0x40
#       define      asnsysInfo_present 0x20
#       define      asnvehicleInfo_present 0x10
#       define      asnpassedSitesInfo_present 0x08
    asnEquipmentClass equipmentClass;  /* optional; set in bit_mask
                                        * asnequipmentClass_present if
                                        * present */
		/*支付设备类型 */
    asnGBICCInfo    gbiCCInfo;  /* optional; set in bit_mask
                                 * asngbiCCInfo_present if present */
		/*IC卡预读信息 */
    asnSysInfo      sysInfo;  /* optional; set in bit_mask asnsysInfo_present if
                               * present */
		/*系统信息文件 */
    asnVehicleInfo  vehicleInfo;  /* optional; set in bit_mask
                                   * asnvehicleInfo_present if present */
    asnPassedSitesInfo passedSitesInfo;  /* optional; set in bit_mask
                                          * asnpassedSitesInfo_present if
                                          * present */
} asnOBUPaymentInfoType1;

typedef struct asnOBUPaymentInfo {
    unsigned short  choice;
#       define      asnobuPaymentInfoType1_chosen 1
    union {
        asnOBUPaymentInfoType1 obuPaymentInfoType1;  /* to choose, set choice to
                                             * asnobuPaymentInfoType1_chosen */
    } u;
} asnOBUPaymentInfo;

typedef struct asnVPApplicationParameter {
    asnPaymentEntityID pid;
    asnOBUPaymentInfo obuPaymentInfo;
} asnVPApplicationParameter;

typedef struct asnVPApplicationList {
    struct asnVPApplicationList *next;
    asnVPApplicationParameter value;
} *asnVPApplicationList;

typedef struct asnApduList {
    struct asnApduList *next;
    struct {
        unsigned short  length;
        unsigned char   value[127];
    } value;
} *asnApduList;

#ifndef _OSSNOVALUES

	/* Test Message */
extern const asnExtMsgID asntestData;

	/* DAY II Messages ********************* */
extern const asnExtMsgID asnrtcmData;

extern const asnExtMsgID asnrscData;

extern const asnExtMsgID asnssmData;

extern const asnExtMsgID asnvirData;

extern const asnExtMsgID asnpamData;

extern const asnExtMsgID asnpsmData;

extern const asnExtMsgID asnclpmmData;

extern const asnExtMsgID asnvpmData;

extern const asnBasicVehicleClass asnunknownVehicleClass;

	/* Not Equipped, Not known or unavailable */
extern const asnBasicVehicleClass asnspecialVehicleClass;

	/* Special use */
	/**/
	/* Basic Passenger Motor Vehicle Types */
	/**/
extern const asnBasicVehicleClass asnpassenger_Vehicle_TypeUnknown; /* default type */

extern const asnBasicVehicleClass asnpassenger_Vehicle_TypeOther;

	/* various fuel types are handled in another element */
	/**/
	/* Light Trucks, Pickup, Van, Panel */
	/**/
extern const asnBasicVehicleClass asnlightTruck_Vehicle_TypeUnknown; /* default type */

extern const asnBasicVehicleClass asnlightTruck_Vehicle_TypeOther;

	/**/
	/* Trucks, Various axle types, includes HPMS items */
	/**/
extern const asnBasicVehicleClass asntruck_Vehicle_TypeUnknown; /* default type */

extern const asnBasicVehicleClass asntruck_Vehicle_TypeOther;

extern const asnBasicVehicleClass asntruck_axleCnt2; /* Two axle, six tire single units */

extern const asnBasicVehicleClass asntruck_axleCnt3; /* Three axle, single units */

extern const asnBasicVehicleClass asntruck_axleCnt4; /* Four or more axle, single unit */

extern const asnBasicVehicleClass asntruck_axleCnt4Trailer; /* Four or less axle, single trailer */

extern const asnBasicVehicleClass asntruck_axleCnt5Trailer; /* Five or less axle, single trailer */

extern const asnBasicVehicleClass asntruck_axleCnt6Trailer; /* Six or more axle, single trailer */

extern const asnBasicVehicleClass asntruck_axleCnt5MultiTrailer; /* Five or less axle, multi-trailer */

extern const asnBasicVehicleClass asntruck_axleCnt6MultiTrailer; /* Six axle, multi-trailer */

extern const asnBasicVehicleClass asntruck_axleCnt7MultiTrailer; /* Seven or more axle, multi-trailer */

	/**/
	/* Motorcycle Types */
	/**/
extern const asnBasicVehicleClass asnmotorcycle_TypeUnknown; /* default type */

extern const asnBasicVehicleClass asnmotorcycle_TypeOther;

extern const asnBasicVehicleClass asnmotorcycle_Cruiser_Standard;

extern const asnBasicVehicleClass asnmotorcycle_SportUnclad;

extern const asnBasicVehicleClass asnmotorcycle_SportTouring;

extern const asnBasicVehicleClass asnmotorcycle_SuperSport;

extern const asnBasicVehicleClass asnmotorcycle_Touring;

extern const asnBasicVehicleClass asnmotorcycle_Trike;

extern const asnBasicVehicleClass asnmotorcycle_wPassengers; /* type not stated */

	/**/
	/* Transit Types */
	/**/
extern const asnBasicVehicleClass asntransit_TypeUnknown; /* default type */

extern const asnBasicVehicleClass asntransit_TypeOther;

extern const asnBasicVehicleClass asntransit_BRT;

extern const asnBasicVehicleClass asntransit_ExpressBus;

extern const asnBasicVehicleClass asntransit_LocalBus;

extern const asnBasicVehicleClass asntransit_SchoolBus;

extern const asnBasicVehicleClass asntransit_FixedGuideway;

extern const asnBasicVehicleClass asntransit_Paratransit;

extern const asnBasicVehicleClass asntransit_Paratransit_Ambulance;

	/**/
	/* Emergency Vehicle Types */
	/**/
extern const asnBasicVehicleClass asnemergency_TypeUnknown; /* default type */

extern const asnBasicVehicleClass asnemergency_TypeOther; /* includes federal users */

extern const asnBasicVehicleClass asnemergency_Fire_Light_Vehicle;

extern const asnBasicVehicleClass asnemergency_Fire_Heavy_Vehicle;

extern const asnBasicVehicleClass asnemergency_Fire_Paramedic_Vehicle;

extern const asnBasicVehicleClass asnemergency_Fire_Ambulance_Vehicle;

extern const asnBasicVehicleClass asnemergency_Police_Light_Vehicle;

extern const asnBasicVehicleClass asnemergency_Police_Heavy_Vehicle;

extern const asnBasicVehicleClass asnemergency_Other_Responder;

extern const asnBasicVehicleClass asnemergency_Other_Ambulance;

	/**/
	/* Other V2X Equipped Travelers */
	/**/
extern const asnBasicVehicleClass asnotherTraveler_TypeUnknown; /* default type */

extern const asnBasicVehicleClass asnotherTraveler_TypeOther;

extern const asnBasicVehicleClass asnotherTraveler_Pedestrian;

extern const asnBasicVehicleClass asnotherTraveler_Visually_Disabled;

extern const asnBasicVehicleClass asnotherTraveler_Physically_Disabled;

extern const asnBasicVehicleClass asnotherTraveler_Bicycle;

extern const asnBasicVehicleClass asnotherTraveler_Vulnerable_Roadworker;

	/**/
	/* Other V2X Equipped Device Types */
	/**/
extern const asnBasicVehicleClass asninfrastructure_TypeUnknown; /* default type */

extern const asnBasicVehicleClass asninfrastructure_Fixed;

extern const asnBasicVehicleClass asninfrastructure_Movable;

extern const asnBasicVehicleClass asnequipped_CargoTrailer;

extern const asnFuelType asnunknownFuel; /* Gasoline Powered */

extern const asnFuelType asngasoline;

extern const asnFuelType asnethanol; /* Including blends */

extern const asnFuelType asndiesel; /* All types */

extern const asnFuelType asnelectric;

extern const asnFuelType asnhybrid; /* All types */

extern const asnFuelType asnhydrogen;

extern const asnFuelType asnnatGasLiquid; /* Liquefied */

extern const asnFuelType asnnatGasComp; /* Compressed */

extern const asnFuelType asnpropane;

#endif  /* #ifndef _OSSNOVALUES */


extern void * const ltev_csae_157_2020_defs;    /* encoder-decoder control table */
#endif /* OSS_ltev_csae_157_2020_defs */
